
cube_mx_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08001bd8  08001bd8  00011bd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001d50  08001d50  00011d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000160  20000004  08001d58  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000164  08001d58  00020164  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000173c6  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bbd  00000000  00000000  000373f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008723  00000000  00000000  00039faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a38  00000000  00000000  000426d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fc0  00000000  00000000  00043110  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006323  00000000  00000000  000440d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000039eb  00000000  00000000  0004a3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004ddde  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ff8  00000000  00000000  0004de5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001bc0 	.word	0x08001bc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001bc0 	.word	0x08001bc0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fbee 	bl	8000a18 <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f870 	bl	8000328 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f830 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 fb65 	bl	8001938 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	2000002c 	.word	0x2000002c

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	2000002c 	.word	0x2000002c

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000314:	231f      	movs	r3, #31
 8000316:	4018      	ands	r0, r3
 8000318:	3b1e      	subs	r3, #30
 800031a:	4083      	lsls	r3, r0
 800031c:	4a01      	ldr	r2, [pc, #4]	; (8000324 <HAL_NVIC_EnableIRQ+0x10>)
 800031e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000320:	4770      	bx	lr
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	e000e100 	.word	0xe000e100

08000328 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000328:	4a09      	ldr	r2, [pc, #36]	; (8000350 <HAL_SYSTICK_Config+0x28>)
 800032a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800032c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800032e:	4293      	cmp	r3, r2
 8000330:	d80d      	bhi.n	800034e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000332:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000338:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	6a03      	ldr	r3, [r0, #32]
 800033c:	0609      	lsls	r1, r1, #24
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	0a1b      	lsrs	r3, r3, #8
 8000342:	430b      	orrs	r3, r1
 8000344:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000346:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000348:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800034c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800034e:	4770      	bx	lr
 8000350:	00ffffff 	.word	0x00ffffff
 8000354:	e000e010 	.word	0xe000e010
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800035c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035e:	680b      	ldr	r3, [r1, #0]
{ 
 8000360:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000362:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000364:	2300      	movs	r3, #0
{ 
 8000366:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000368:	9a02      	ldr	r2, [sp, #8]
 800036a:	40da      	lsrs	r2, r3
 800036c:	d101      	bne.n	8000372 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800036e:	b007      	add	sp, #28
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000372:	2201      	movs	r2, #1
 8000374:	409a      	lsls	r2, r3
 8000376:	9203      	str	r2, [sp, #12]
 8000378:	9903      	ldr	r1, [sp, #12]
 800037a:	9a02      	ldr	r2, [sp, #8]
 800037c:	400a      	ands	r2, r1
 800037e:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000380:	d100      	bne.n	8000384 <HAL_GPIO_Init+0x28>
 8000382:	e088      	b.n	8000496 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000384:	9a01      	ldr	r2, [sp, #4]
 8000386:	2110      	movs	r1, #16
 8000388:	6852      	ldr	r2, [r2, #4]
 800038a:	0016      	movs	r6, r2
 800038c:	438e      	bics	r6, r1
 800038e:	2e02      	cmp	r6, #2
 8000390:	d10e      	bne.n	80003b0 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000392:	2507      	movs	r5, #7
 8000394:	401d      	ands	r5, r3
 8000396:	00ad      	lsls	r5, r5, #2
 8000398:	3901      	subs	r1, #1
 800039a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800039c:	08dc      	lsrs	r4, r3, #3
 800039e:	00a4      	lsls	r4, r4, #2
 80003a0:	1904      	adds	r4, r0, r4
 80003a2:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003a4:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003a6:	9901      	ldr	r1, [sp, #4]
 80003a8:	6909      	ldr	r1, [r1, #16]
 80003aa:	40a9      	lsls	r1, r5
 80003ac:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003ae:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003b0:	2403      	movs	r4, #3
 80003b2:	005f      	lsls	r7, r3, #1
 80003b4:	40bc      	lsls	r4, r7
 80003b6:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003b8:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ba:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003bc:	4025      	ands	r5, r4
 80003be:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c0:	2503      	movs	r5, #3
 80003c2:	4015      	ands	r5, r2
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	4661      	mov	r1, ip
 80003c8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003ca:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003cc:	2e01      	cmp	r6, #1
 80003ce:	d80f      	bhi.n	80003f0 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003d2:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d4:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003d6:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003d8:	40bd      	lsls	r5, r7
 80003da:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003dc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003de:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003e0:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e2:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003e4:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003e6:	2101      	movs	r1, #1
 80003e8:	400d      	ands	r5, r1
 80003ea:	409d      	lsls	r5, r3
 80003ec:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003ee:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003f0:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f2:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003f4:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003f6:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003f8:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003fa:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003fc:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003fe:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000400:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000402:	420a      	tst	r2, r1
 8000404:	d047      	beq.n	8000496 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000406:	2101      	movs	r1, #1
 8000408:	4c24      	ldr	r4, [pc, #144]	; (800049c <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000410:	430d      	orrs	r5, r1
 8000412:	61a5      	str	r5, [r4, #24]
 8000414:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000416:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000418:	400c      	ands	r4, r1
 800041a:	9405      	str	r4, [sp, #20]
 800041c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041e:	240f      	movs	r4, #15
 8000420:	491f      	ldr	r1, [pc, #124]	; (80004a0 <HAL_GPIO_Init+0x144>)
 8000422:	00ad      	lsls	r5, r5, #2
 8000424:	00b6      	lsls	r6, r6, #2
 8000426:	186d      	adds	r5, r5, r1
 8000428:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800042c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000430:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000432:	2400      	movs	r4, #0
 8000434:	4288      	cmp	r0, r1
 8000436:	d008      	beq.n	800044a <HAL_GPIO_Init+0xee>
 8000438:	491a      	ldr	r1, [pc, #104]	; (80004a4 <HAL_GPIO_Init+0x148>)
 800043a:	3401      	adds	r4, #1
 800043c:	4288      	cmp	r0, r1
 800043e:	d004      	beq.n	800044a <HAL_GPIO_Init+0xee>
 8000440:	4919      	ldr	r1, [pc, #100]	; (80004a8 <HAL_GPIO_Init+0x14c>)
 8000442:	3404      	adds	r4, #4
 8000444:	4288      	cmp	r0, r1
 8000446:	d100      	bne.n	800044a <HAL_GPIO_Init+0xee>
 8000448:	3c03      	subs	r4, #3
 800044a:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800044c:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800044e:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000450:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000452:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000454:	4c15      	ldr	r4, [pc, #84]	; (80004ac <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000456:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000458:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800045a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045c:	03d1      	lsls	r1, r2, #15
 800045e:	d401      	bmi.n	8000464 <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000460:	003e      	movs	r6, r7
 8000462:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000464:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000466:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000468:	9e00      	ldr	r6, [sp, #0]
 800046a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800046c:	0391      	lsls	r1, r2, #14
 800046e:	d401      	bmi.n	8000474 <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000470:	003e      	movs	r6, r7
 8000472:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000474:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000476:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000478:	9e00      	ldr	r6, [sp, #0]
 800047a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800047c:	02d1      	lsls	r1, r2, #11
 800047e:	d401      	bmi.n	8000484 <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000480:	003e      	movs	r6, r7
 8000482:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000484:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000486:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000488:	9f00      	ldr	r7, [sp, #0]
 800048a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800048c:	0292      	lsls	r2, r2, #10
 800048e:	d401      	bmi.n	8000494 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000490:	402e      	ands	r6, r5
 8000492:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000494:	60e7      	str	r7, [r4, #12]
    position++;
 8000496:	3301      	adds	r3, #1
 8000498:	e766      	b.n	8000368 <HAL_GPIO_Init+0xc>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010000 	.word	0x40010000
 80004a4:	48000400 	.word	0x48000400
 80004a8:	48000800 	.word	0x48000800
 80004ac:	40010400 	.word	0x40010400

080004b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	d001      	beq.n	80004b8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004b4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004b6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004ba:	e7fc      	b.n	80004b6 <HAL_GPIO_WritePin+0x6>

080004bc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004bc:	6943      	ldr	r3, [r0, #20]
 80004be:	4059      	eors	r1, r3
 80004c0:	6141      	str	r1, [r0, #20]
}
 80004c2:	4770      	bx	lr

080004c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c6:	6803      	ldr	r3, [r0, #0]
{
 80004c8:	b085      	sub	sp, #20
 80004ca:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004cc:	07db      	lsls	r3, r3, #31
 80004ce:	d42f      	bmi.n	8000530 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d0:	682b      	ldr	r3, [r5, #0]
 80004d2:	079b      	lsls	r3, r3, #30
 80004d4:	d500      	bpl.n	80004d8 <HAL_RCC_OscConfig+0x14>
 80004d6:	e081      	b.n	80005dc <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004d8:	682b      	ldr	r3, [r5, #0]
 80004da:	071b      	lsls	r3, r3, #28
 80004dc:	d500      	bpl.n	80004e0 <HAL_RCC_OscConfig+0x1c>
 80004de:	e0bc      	b.n	800065a <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004e0:	682b      	ldr	r3, [r5, #0]
 80004e2:	075b      	lsls	r3, r3, #29
 80004e4:	d500      	bpl.n	80004e8 <HAL_RCC_OscConfig+0x24>
 80004e6:	e0df      	b.n	80006a8 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80004e8:	682b      	ldr	r3, [r5, #0]
 80004ea:	06db      	lsls	r3, r3, #27
 80004ec:	d51a      	bpl.n	8000524 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80004ee:	696a      	ldr	r2, [r5, #20]
 80004f0:	4cb5      	ldr	r4, [pc, #724]	; (80007c8 <HAL_RCC_OscConfig+0x304>)
 80004f2:	2304      	movs	r3, #4
 80004f4:	2a01      	cmp	r2, #1
 80004f6:	d000      	beq.n	80004fa <HAL_RCC_OscConfig+0x36>
 80004f8:	e14b      	b.n	8000792 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80004fa:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80004fc:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80004fe:	430b      	orrs	r3, r1
 8000500:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000504:	431a      	orrs	r2, r3
 8000506:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000508:	f7ff febe 	bl	8000288 <HAL_GetTick>
 800050c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800050e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000510:	4233      	tst	r3, r6
 8000512:	d100      	bne.n	8000516 <HAL_RCC_OscConfig+0x52>
 8000514:	e136      	b.n	8000784 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000516:	21f8      	movs	r1, #248	; 0xf8
 8000518:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800051a:	69ab      	ldr	r3, [r5, #24]
 800051c:	438a      	bics	r2, r1
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	4313      	orrs	r3, r2
 8000522:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000524:	6a29      	ldr	r1, [r5, #32]
 8000526:	2900      	cmp	r1, #0
 8000528:	d000      	beq.n	800052c <HAL_RCC_OscConfig+0x68>
 800052a:	e159      	b.n	80007e0 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800052c:	2000      	movs	r0, #0
 800052e:	e013      	b.n	8000558 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000530:	210c      	movs	r1, #12
 8000532:	4ca5      	ldr	r4, [pc, #660]	; (80007c8 <HAL_RCC_OscConfig+0x304>)
 8000534:	6862      	ldr	r2, [r4, #4]
 8000536:	400a      	ands	r2, r1
 8000538:	2a04      	cmp	r2, #4
 800053a:	d006      	beq.n	800054a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800053c:	6863      	ldr	r3, [r4, #4]
 800053e:	400b      	ands	r3, r1
 8000540:	2b08      	cmp	r3, #8
 8000542:	d10b      	bne.n	800055c <HAL_RCC_OscConfig+0x98>
 8000544:	6863      	ldr	r3, [r4, #4]
 8000546:	03db      	lsls	r3, r3, #15
 8000548:	d508      	bpl.n	800055c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800054a:	6823      	ldr	r3, [r4, #0]
 800054c:	039b      	lsls	r3, r3, #14
 800054e:	d5bf      	bpl.n	80004d0 <HAL_RCC_OscConfig+0xc>
 8000550:	686b      	ldr	r3, [r5, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d1bc      	bne.n	80004d0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000556:	2001      	movs	r0, #1
}
 8000558:	b005      	add	sp, #20
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800055c:	686b      	ldr	r3, [r5, #4]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d113      	bne.n	800058a <HAL_RCC_OscConfig+0xc6>
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	6822      	ldr	r2, [r4, #0]
 8000566:	025b      	lsls	r3, r3, #9
 8000568:	4313      	orrs	r3, r2
 800056a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800056c:	f7ff fe8c 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000570:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000572:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000574:	02b6      	lsls	r6, r6, #10
 8000576:	6823      	ldr	r3, [r4, #0]
 8000578:	4233      	tst	r3, r6
 800057a:	d1a9      	bne.n	80004d0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800057c:	f7ff fe84 	bl	8000288 <HAL_GetTick>
 8000580:	1bc0      	subs	r0, r0, r7
 8000582:	2864      	cmp	r0, #100	; 0x64
 8000584:	d9f7      	bls.n	8000576 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000586:	2003      	movs	r0, #3
 8000588:	e7e6      	b.n	8000558 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058a:	2b00      	cmp	r3, #0
 800058c:	d116      	bne.n	80005bc <HAL_RCC_OscConfig+0xf8>
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	4a8e      	ldr	r2, [pc, #568]	; (80007cc <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000592:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000594:	4013      	ands	r3, r2
 8000596:	6023      	str	r3, [r4, #0]
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	4a8d      	ldr	r2, [pc, #564]	; (80007d0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800059c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800059e:	4013      	ands	r3, r2
 80005a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005a2:	f7ff fe71 	bl	8000288 <HAL_GetTick>
 80005a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005a8:	6823      	ldr	r3, [r4, #0]
 80005aa:	4233      	tst	r3, r6
 80005ac:	d100      	bne.n	80005b0 <HAL_RCC_OscConfig+0xec>
 80005ae:	e78f      	b.n	80004d0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005b0:	f7ff fe6a 	bl	8000288 <HAL_GetTick>
 80005b4:	1bc0      	subs	r0, r0, r7
 80005b6:	2864      	cmp	r0, #100	; 0x64
 80005b8:	d9f6      	bls.n	80005a8 <HAL_RCC_OscConfig+0xe4>
 80005ba:	e7e4      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d105      	bne.n	80005cc <HAL_RCC_OscConfig+0x108>
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	6822      	ldr	r2, [r4, #0]
 80005c4:	02db      	lsls	r3, r3, #11
 80005c6:	4313      	orrs	r3, r2
 80005c8:	6023      	str	r3, [r4, #0]
 80005ca:	e7ca      	b.n	8000562 <HAL_RCC_OscConfig+0x9e>
 80005cc:	6823      	ldr	r3, [r4, #0]
 80005ce:	4a7f      	ldr	r2, [pc, #508]	; (80007cc <HAL_RCC_OscConfig+0x308>)
 80005d0:	4013      	ands	r3, r2
 80005d2:	6023      	str	r3, [r4, #0]
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	4a7e      	ldr	r2, [pc, #504]	; (80007d0 <HAL_RCC_OscConfig+0x30c>)
 80005d8:	4013      	ands	r3, r2
 80005da:	e7c6      	b.n	800056a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005dc:	220c      	movs	r2, #12
 80005de:	4c7a      	ldr	r4, [pc, #488]	; (80007c8 <HAL_RCC_OscConfig+0x304>)
 80005e0:	6863      	ldr	r3, [r4, #4]
 80005e2:	4213      	tst	r3, r2
 80005e4:	d006      	beq.n	80005f4 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005e6:	6863      	ldr	r3, [r4, #4]
 80005e8:	4013      	ands	r3, r2
 80005ea:	2b08      	cmp	r3, #8
 80005ec:	d110      	bne.n	8000610 <HAL_RCC_OscConfig+0x14c>
 80005ee:	6863      	ldr	r3, [r4, #4]
 80005f0:	03db      	lsls	r3, r3, #15
 80005f2:	d40d      	bmi.n	8000610 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	079b      	lsls	r3, r3, #30
 80005f8:	d502      	bpl.n	8000600 <HAL_RCC_OscConfig+0x13c>
 80005fa:	68eb      	ldr	r3, [r5, #12]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d1aa      	bne.n	8000556 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000600:	21f8      	movs	r1, #248	; 0xf8
 8000602:	6822      	ldr	r2, [r4, #0]
 8000604:	692b      	ldr	r3, [r5, #16]
 8000606:	438a      	bics	r2, r1
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	4313      	orrs	r3, r2
 800060c:	6023      	str	r3, [r4, #0]
 800060e:	e763      	b.n	80004d8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000610:	68ea      	ldr	r2, [r5, #12]
 8000612:	2301      	movs	r3, #1
 8000614:	2a00      	cmp	r2, #0
 8000616:	d00f      	beq.n	8000638 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000618:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800061a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800061c:	4313      	orrs	r3, r2
 800061e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000620:	f7ff fe32 	bl	8000288 <HAL_GetTick>
 8000624:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	4233      	tst	r3, r6
 800062a:	d1e9      	bne.n	8000600 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800062c:	f7ff fe2c 	bl	8000288 <HAL_GetTick>
 8000630:	1bc0      	subs	r0, r0, r7
 8000632:	2802      	cmp	r0, #2
 8000634:	d9f7      	bls.n	8000626 <HAL_RCC_OscConfig+0x162>
 8000636:	e7a6      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000638:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800063a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800063c:	439a      	bics	r2, r3
 800063e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000640:	f7ff fe22 	bl	8000288 <HAL_GetTick>
 8000644:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000646:	6823      	ldr	r3, [r4, #0]
 8000648:	4233      	tst	r3, r6
 800064a:	d100      	bne.n	800064e <HAL_RCC_OscConfig+0x18a>
 800064c:	e744      	b.n	80004d8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800064e:	f7ff fe1b 	bl	8000288 <HAL_GetTick>
 8000652:	1bc0      	subs	r0, r0, r7
 8000654:	2802      	cmp	r0, #2
 8000656:	d9f6      	bls.n	8000646 <HAL_RCC_OscConfig+0x182>
 8000658:	e795      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800065a:	69ea      	ldr	r2, [r5, #28]
 800065c:	2301      	movs	r3, #1
 800065e:	4c5a      	ldr	r4, [pc, #360]	; (80007c8 <HAL_RCC_OscConfig+0x304>)
 8000660:	2a00      	cmp	r2, #0
 8000662:	d010      	beq.n	8000686 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000664:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000666:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000668:	4313      	orrs	r3, r2
 800066a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800066c:	f7ff fe0c 	bl	8000288 <HAL_GetTick>
 8000670:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000674:	4233      	tst	r3, r6
 8000676:	d000      	beq.n	800067a <HAL_RCC_OscConfig+0x1b6>
 8000678:	e732      	b.n	80004e0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800067a:	f7ff fe05 	bl	8000288 <HAL_GetTick>
 800067e:	1bc0      	subs	r0, r0, r7
 8000680:	2802      	cmp	r0, #2
 8000682:	d9f6      	bls.n	8000672 <HAL_RCC_OscConfig+0x1ae>
 8000684:	e77f      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000686:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000688:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800068a:	439a      	bics	r2, r3
 800068c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800068e:	f7ff fdfb 	bl	8000288 <HAL_GetTick>
 8000692:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000696:	4233      	tst	r3, r6
 8000698:	d100      	bne.n	800069c <HAL_RCC_OscConfig+0x1d8>
 800069a:	e721      	b.n	80004e0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800069c:	f7ff fdf4 	bl	8000288 <HAL_GetTick>
 80006a0:	1bc0      	subs	r0, r0, r7
 80006a2:	2802      	cmp	r0, #2
 80006a4:	d9f6      	bls.n	8000694 <HAL_RCC_OscConfig+0x1d0>
 80006a6:	e76e      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006a8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80006aa:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006ac:	4c46      	ldr	r4, [pc, #280]	; (80007c8 <HAL_RCC_OscConfig+0x304>)
 80006ae:	0552      	lsls	r2, r2, #21
 80006b0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80006b2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006b4:	4213      	tst	r3, r2
 80006b6:	d108      	bne.n	80006ca <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	69e3      	ldr	r3, [r4, #28]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	61e3      	str	r3, [r4, #28]
 80006be:	69e3      	ldr	r3, [r4, #28]
 80006c0:	4013      	ands	r3, r2
 80006c2:	9303      	str	r3, [sp, #12]
 80006c4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006ca:	2780      	movs	r7, #128	; 0x80
 80006cc:	4e41      	ldr	r6, [pc, #260]	; (80007d4 <HAL_RCC_OscConfig+0x310>)
 80006ce:	007f      	lsls	r7, r7, #1
 80006d0:	6833      	ldr	r3, [r6, #0]
 80006d2:	423b      	tst	r3, r7
 80006d4:	d006      	beq.n	80006e4 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d6:	68ab      	ldr	r3, [r5, #8]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d113      	bne.n	8000704 <HAL_RCC_OscConfig+0x240>
 80006dc:	6a22      	ldr	r2, [r4, #32]
 80006de:	4313      	orrs	r3, r2
 80006e0:	6223      	str	r3, [r4, #32]
 80006e2:	e030      	b.n	8000746 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006e4:	6833      	ldr	r3, [r6, #0]
 80006e6:	433b      	orrs	r3, r7
 80006e8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006ea:	f7ff fdcd 	bl	8000288 <HAL_GetTick>
 80006ee:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006f0:	6833      	ldr	r3, [r6, #0]
 80006f2:	423b      	tst	r3, r7
 80006f4:	d1ef      	bne.n	80006d6 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006f6:	f7ff fdc7 	bl	8000288 <HAL_GetTick>
 80006fa:	9b01      	ldr	r3, [sp, #4]
 80006fc:	1ac0      	subs	r0, r0, r3
 80006fe:	2864      	cmp	r0, #100	; 0x64
 8000700:	d9f6      	bls.n	80006f0 <HAL_RCC_OscConfig+0x22c>
 8000702:	e740      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
 8000704:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000706:	2b00      	cmp	r3, #0
 8000708:	d114      	bne.n	8000734 <HAL_RCC_OscConfig+0x270>
 800070a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800070c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800070e:	4393      	bics	r3, r2
 8000710:	6223      	str	r3, [r4, #32]
 8000712:	6a23      	ldr	r3, [r4, #32]
 8000714:	3203      	adds	r2, #3
 8000716:	4393      	bics	r3, r2
 8000718:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800071a:	f7ff fdb5 	bl	8000288 <HAL_GetTick>
 800071e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000720:	6a23      	ldr	r3, [r4, #32]
 8000722:	423b      	tst	r3, r7
 8000724:	d025      	beq.n	8000772 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000726:	f7ff fdaf 	bl	8000288 <HAL_GetTick>
 800072a:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <HAL_RCC_OscConfig+0x314>)
 800072c:	1b80      	subs	r0, r0, r6
 800072e:	4298      	cmp	r0, r3
 8000730:	d9f6      	bls.n	8000720 <HAL_RCC_OscConfig+0x25c>
 8000732:	e728      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000734:	2b05      	cmp	r3, #5
 8000736:	d10b      	bne.n	8000750 <HAL_RCC_OscConfig+0x28c>
 8000738:	6a21      	ldr	r1, [r4, #32]
 800073a:	3b01      	subs	r3, #1
 800073c:	430b      	orrs	r3, r1
 800073e:	6223      	str	r3, [r4, #32]
 8000740:	6a23      	ldr	r3, [r4, #32]
 8000742:	431a      	orrs	r2, r3
 8000744:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000746:	f7ff fd9f 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800074a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800074c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800074e:	e00d      	b.n	800076c <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000750:	6a23      	ldr	r3, [r4, #32]
 8000752:	4393      	bics	r3, r2
 8000754:	2204      	movs	r2, #4
 8000756:	6223      	str	r3, [r4, #32]
 8000758:	6a23      	ldr	r3, [r4, #32]
 800075a:	4393      	bics	r3, r2
 800075c:	e7c0      	b.n	80006e0 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800075e:	f7ff fd93 	bl	8000288 <HAL_GetTick>
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <HAL_RCC_OscConfig+0x314>)
 8000764:	1b80      	subs	r0, r0, r6
 8000766:	4298      	cmp	r0, r3
 8000768:	d900      	bls.n	800076c <HAL_RCC_OscConfig+0x2a8>
 800076a:	e70c      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800076c:	6a23      	ldr	r3, [r4, #32]
 800076e:	423b      	tst	r3, r7
 8000770:	d0f5      	beq.n	800075e <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000772:	9b00      	ldr	r3, [sp, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d000      	beq.n	800077a <HAL_RCC_OscConfig+0x2b6>
 8000778:	e6b6      	b.n	80004e8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800077a:	69e3      	ldr	r3, [r4, #28]
 800077c:	4a17      	ldr	r2, [pc, #92]	; (80007dc <HAL_RCC_OscConfig+0x318>)
 800077e:	4013      	ands	r3, r2
 8000780:	61e3      	str	r3, [r4, #28]
 8000782:	e6b1      	b.n	80004e8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000784:	f7ff fd80 	bl	8000288 <HAL_GetTick>
 8000788:	1bc0      	subs	r0, r0, r7
 800078a:	2802      	cmp	r0, #2
 800078c:	d800      	bhi.n	8000790 <HAL_RCC_OscConfig+0x2cc>
 800078e:	e6be      	b.n	800050e <HAL_RCC_OscConfig+0x4a>
 8000790:	e6f9      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000792:	3205      	adds	r2, #5
 8000794:	d103      	bne.n	800079e <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000796:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000798:	439a      	bics	r2, r3
 800079a:	6362      	str	r2, [r4, #52]	; 0x34
 800079c:	e6bb      	b.n	8000516 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800079e:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007a0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007a2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80007a4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80007a6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80007a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007aa:	4393      	bics	r3, r2
 80007ac:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007ae:	f7ff fd6b 	bl	8000288 <HAL_GetTick>
 80007b2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007b6:	4233      	tst	r3, r6
 80007b8:	d100      	bne.n	80007bc <HAL_RCC_OscConfig+0x2f8>
 80007ba:	e6b3      	b.n	8000524 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007bc:	f7ff fd64 	bl	8000288 <HAL_GetTick>
 80007c0:	1bc0      	subs	r0, r0, r7
 80007c2:	2802      	cmp	r0, #2
 80007c4:	d9f6      	bls.n	80007b4 <HAL_RCC_OscConfig+0x2f0>
 80007c6:	e6de      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
 80007c8:	40021000 	.word	0x40021000
 80007cc:	fffeffff 	.word	0xfffeffff
 80007d0:	fffbffff 	.word	0xfffbffff
 80007d4:	40007000 	.word	0x40007000
 80007d8:	00001388 	.word	0x00001388
 80007dc:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007e0:	220c      	movs	r2, #12
 80007e2:	4c26      	ldr	r4, [pc, #152]	; (800087c <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80007e4:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007e6:	6863      	ldr	r3, [r4, #4]
 80007e8:	4013      	ands	r3, r2
 80007ea:	2b08      	cmp	r3, #8
 80007ec:	d100      	bne.n	80007f0 <HAL_RCC_OscConfig+0x32c>
 80007ee:	e6b3      	b.n	8000558 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	4a23      	ldr	r2, [pc, #140]	; (8000880 <HAL_RCC_OscConfig+0x3bc>)
 80007f4:	4013      	ands	r3, r2
 80007f6:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007f8:	2902      	cmp	r1, #2
 80007fa:	d12f      	bne.n	800085c <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80007fc:	f7ff fd44 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000800:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000802:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000804:	04b6      	lsls	r6, r6, #18
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	4233      	tst	r3, r6
 800080a:	d121      	bne.n	8000850 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800080c:	220f      	movs	r2, #15
 800080e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000810:	4393      	bics	r3, r2
 8000812:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000814:	4313      	orrs	r3, r2
 8000816:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000818:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800081a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800081c:	6862      	ldr	r2, [r4, #4]
 800081e:	430b      	orrs	r3, r1
 8000820:	4918      	ldr	r1, [pc, #96]	; (8000884 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000822:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000824:	400a      	ands	r2, r1
 8000826:	4313      	orrs	r3, r2
 8000828:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	6822      	ldr	r2, [r4, #0]
 800082e:	045b      	lsls	r3, r3, #17
 8000830:	4313      	orrs	r3, r2
 8000832:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000834:	f7ff fd28 	bl	8000288 <HAL_GetTick>
 8000838:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800083a:	04ad      	lsls	r5, r5, #18
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	422b      	tst	r3, r5
 8000840:	d000      	beq.n	8000844 <HAL_RCC_OscConfig+0x380>
 8000842:	e673      	b.n	800052c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000844:	f7ff fd20 	bl	8000288 <HAL_GetTick>
 8000848:	1b80      	subs	r0, r0, r6
 800084a:	2802      	cmp	r0, #2
 800084c:	d9f6      	bls.n	800083c <HAL_RCC_OscConfig+0x378>
 800084e:	e69a      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000850:	f7ff fd1a 	bl	8000288 <HAL_GetTick>
 8000854:	1bc0      	subs	r0, r0, r7
 8000856:	2802      	cmp	r0, #2
 8000858:	d9d5      	bls.n	8000806 <HAL_RCC_OscConfig+0x342>
 800085a:	e694      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800085c:	f7ff fd14 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000860:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000862:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000864:	04ad      	lsls	r5, r5, #18
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	422b      	tst	r3, r5
 800086a:	d100      	bne.n	800086e <HAL_RCC_OscConfig+0x3aa>
 800086c:	e65e      	b.n	800052c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800086e:	f7ff fd0b 	bl	8000288 <HAL_GetTick>
 8000872:	1b80      	subs	r0, r0, r6
 8000874:	2802      	cmp	r0, #2
 8000876:	d9f6      	bls.n	8000866 <HAL_RCC_OscConfig+0x3a2>
 8000878:	e685      	b.n	8000586 <HAL_RCC_OscConfig+0xc2>
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	40021000 	.word	0x40021000
 8000880:	feffffff 	.word	0xfeffffff
 8000884:	ffc2ffff 	.word	0xffc2ffff

08000888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000888:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800088a:	4c14      	ldr	r4, [pc, #80]	; (80008dc <HAL_RCC_GetSysClockFreq+0x54>)
{
 800088c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800088e:	2210      	movs	r2, #16
 8000890:	0021      	movs	r1, r4
 8000892:	4668      	mov	r0, sp
 8000894:	f001 f982 	bl	8001b9c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000898:	0021      	movs	r1, r4
 800089a:	ad04      	add	r5, sp, #16
 800089c:	2210      	movs	r2, #16
 800089e:	3110      	adds	r1, #16
 80008a0:	0028      	movs	r0, r5
 80008a2:	f001 f97b 	bl	8001b9c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80008a6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80008a8:	4e0d      	ldr	r6, [pc, #52]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x58>)
 80008aa:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008ac:	401a      	ands	r2, r3
 80008ae:	2a08      	cmp	r2, #8
 80008b0:	d111      	bne.n	80008d6 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80008b2:	200f      	movs	r0, #15
 80008b4:	466a      	mov	r2, sp
 80008b6:	0c99      	lsrs	r1, r3, #18
 80008b8:	4001      	ands	r1, r0
 80008ba:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80008bc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80008be:	4002      	ands	r2, r0
 80008c0:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80008c2:	03db      	lsls	r3, r3, #15
 80008c4:	d505      	bpl.n	80008d2 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80008c8:	f7ff fc28 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008cc:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008ce:	b008      	add	sp, #32
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x60>)
 80008d4:	e7fa      	b.n	80008cc <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80008d8:	e7f9      	b.n	80008ce <HAL_RCC_GetSysClockFreq+0x46>
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	08001bd8 	.word	0x08001bd8
 80008e0:	40021000 	.word	0x40021000
 80008e4:	007a1200 	.word	0x007a1200
 80008e8:	003d0900 	.word	0x003d0900

080008ec <HAL_RCC_ClockConfig>:
{
 80008ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ee:	2201      	movs	r2, #1
 80008f0:	4c43      	ldr	r4, [pc, #268]	; (8000a00 <HAL_RCC_ClockConfig+0x114>)
{
 80008f2:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f4:	6823      	ldr	r3, [r4, #0]
{
 80008f6:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f8:	4013      	ands	r3, r2
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d31c      	bcc.n	8000938 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008fe:	6832      	ldr	r2, [r6, #0]
 8000900:	0793      	lsls	r3, r2, #30
 8000902:	d423      	bmi.n	800094c <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000904:	07d3      	lsls	r3, r2, #31
 8000906:	d429      	bmi.n	800095c <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000908:	2301      	movs	r3, #1
 800090a:	6822      	ldr	r2, [r4, #0]
 800090c:	401a      	ands	r2, r3
 800090e:	4297      	cmp	r7, r2
 8000910:	d367      	bcc.n	80009e2 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000912:	6833      	ldr	r3, [r6, #0]
 8000914:	4c3b      	ldr	r4, [pc, #236]	; (8000a04 <HAL_RCC_ClockConfig+0x118>)
 8000916:	075b      	lsls	r3, r3, #29
 8000918:	d46a      	bmi.n	80009f0 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800091a:	f7ff ffb5 	bl	8000888 <HAL_RCC_GetSysClockFreq>
 800091e:	6863      	ldr	r3, [r4, #4]
 8000920:	4a39      	ldr	r2, [pc, #228]	; (8000a08 <HAL_RCC_ClockConfig+0x11c>)
 8000922:	061b      	lsls	r3, r3, #24
 8000924:	0f1b      	lsrs	r3, r3, #28
 8000926:	5cd3      	ldrb	r3, [r2, r3]
 8000928:	40d8      	lsrs	r0, r3
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <HAL_RCC_ClockConfig+0x120>)
 800092c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff fc80 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000934:	2000      	movs	r0, #0
 8000936:	e008      	b.n	800094a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	4393      	bics	r3, r2
 800093c:	430b      	orrs	r3, r1
 800093e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	4013      	ands	r3, r2
 8000944:	4299      	cmp	r1, r3
 8000946:	d0da      	beq.n	80008fe <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000948:	2001      	movs	r0, #1
}
 800094a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800094c:	20f0      	movs	r0, #240	; 0xf0
 800094e:	492d      	ldr	r1, [pc, #180]	; (8000a04 <HAL_RCC_ClockConfig+0x118>)
 8000950:	684b      	ldr	r3, [r1, #4]
 8000952:	4383      	bics	r3, r0
 8000954:	68b0      	ldr	r0, [r6, #8]
 8000956:	4303      	orrs	r3, r0
 8000958:	604b      	str	r3, [r1, #4]
 800095a:	e7d3      	b.n	8000904 <HAL_RCC_ClockConfig+0x18>
 800095c:	4d29      	ldr	r5, [pc, #164]	; (8000a04 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800095e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000960:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000962:	2a01      	cmp	r2, #1
 8000964:	d11a      	bne.n	800099c <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000966:	039b      	lsls	r3, r3, #14
 8000968:	d5ee      	bpl.n	8000948 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800096a:	2103      	movs	r1, #3
 800096c:	686b      	ldr	r3, [r5, #4]
 800096e:	438b      	bics	r3, r1
 8000970:	4313      	orrs	r3, r2
 8000972:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000974:	f7ff fc88 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000978:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800097a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800097c:	2b01      	cmp	r3, #1
 800097e:	d115      	bne.n	80009ac <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000980:	220c      	movs	r2, #12
 8000982:	686b      	ldr	r3, [r5, #4]
 8000984:	4013      	ands	r3, r2
 8000986:	2b04      	cmp	r3, #4
 8000988:	d0be      	beq.n	8000908 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800098a:	f7ff fc7d 	bl	8000288 <HAL_GetTick>
 800098e:	9b01      	ldr	r3, [sp, #4]
 8000990:	1ac0      	subs	r0, r0, r3
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_RCC_ClockConfig+0x124>)
 8000994:	4298      	cmp	r0, r3
 8000996:	d9f3      	bls.n	8000980 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000998:	2003      	movs	r0, #3
 800099a:	e7d6      	b.n	800094a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800099c:	2a02      	cmp	r2, #2
 800099e:	d102      	bne.n	80009a6 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009a0:	019b      	lsls	r3, r3, #6
 80009a2:	d4e2      	bmi.n	800096a <HAL_RCC_ClockConfig+0x7e>
 80009a4:	e7d0      	b.n	8000948 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a6:	079b      	lsls	r3, r3, #30
 80009a8:	d4df      	bmi.n	800096a <HAL_RCC_ClockConfig+0x7e>
 80009aa:	e7cd      	b.n	8000948 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d012      	beq.n	80009d6 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009b0:	220c      	movs	r2, #12
 80009b2:	686b      	ldr	r3, [r5, #4]
 80009b4:	4213      	tst	r3, r2
 80009b6:	d0a7      	beq.n	8000908 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b8:	f7ff fc66 	bl	8000288 <HAL_GetTick>
 80009bc:	9b01      	ldr	r3, [sp, #4]
 80009be:	1ac0      	subs	r0, r0, r3
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_RCC_ClockConfig+0x124>)
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d9f4      	bls.n	80009b0 <HAL_RCC_ClockConfig+0xc4>
 80009c6:	e7e7      	b.n	8000998 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c8:	f7ff fc5e 	bl	8000288 <HAL_GetTick>
 80009cc:	9b01      	ldr	r3, [sp, #4]
 80009ce:	1ac0      	subs	r0, r0, r3
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_RCC_ClockConfig+0x124>)
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d8e0      	bhi.n	8000998 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009d6:	220c      	movs	r2, #12
 80009d8:	686b      	ldr	r3, [r5, #4]
 80009da:	4013      	ands	r3, r2
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d1f3      	bne.n	80009c8 <HAL_RCC_ClockConfig+0xdc>
 80009e0:	e792      	b.n	8000908 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009e2:	6822      	ldr	r2, [r4, #0]
 80009e4:	439a      	bics	r2, r3
 80009e6:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009e8:	6822      	ldr	r2, [r4, #0]
 80009ea:	421a      	tst	r2, r3
 80009ec:	d1ac      	bne.n	8000948 <HAL_RCC_ClockConfig+0x5c>
 80009ee:	e790      	b.n	8000912 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80009f0:	6863      	ldr	r3, [r4, #4]
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_RCC_ClockConfig+0x128>)
 80009f4:	4013      	ands	r3, r2
 80009f6:	68f2      	ldr	r2, [r6, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	6063      	str	r3, [r4, #4]
 80009fc:	e78d      	b.n	800091a <HAL_RCC_ClockConfig+0x2e>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40022000 	.word	0x40022000
 8000a04:	40021000 	.word	0x40021000
 8000a08:	08001d33 	.word	0x08001d33
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	00001388 	.word	0x00001388
 8000a14:	fffff8ff 	.word	0xfffff8ff

08000a18 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000a18:	4b01      	ldr	r3, [pc, #4]	; (8000a20 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a1a:	6818      	ldr	r0, [r3, #0]
}
 8000a1c:	4770      	bx	lr
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	20000000 	.word	0x20000000

08000a24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	055b      	lsls	r3, r3, #21
 8000a2c:	0f5b      	lsrs	r3, r3, #29
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a32:	6810      	ldr	r0, [r2, #0]
 8000a34:	40d8      	lsrs	r0, r3
}    
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	08001d43 	.word	0x08001d43
 8000a40:	20000000 	.word	0x20000000

08000a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a46:	6803      	ldr	r3, [r0, #0]
{
 8000a48:	b085      	sub	sp, #20
 8000a4a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a4c:	03db      	lsls	r3, r3, #15
 8000a4e:	d528      	bpl.n	8000aa2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a50:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a52:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a54:	4c37      	ldr	r4, [pc, #220]	; (8000b34 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000a56:	0552      	lsls	r2, r2, #21
 8000a58:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000a5a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a5c:	4213      	tst	r3, r2
 8000a5e:	d108      	bne.n	8000a72 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	69e3      	ldr	r3, [r4, #28]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61e3      	str	r3, [r4, #28]
 8000a66:	69e3      	ldr	r3, [r4, #28]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	9303      	str	r3, [sp, #12]
 8000a6c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a72:	2780      	movs	r7, #128	; 0x80
 8000a74:	4e30      	ldr	r6, [pc, #192]	; (8000b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000a76:	007f      	lsls	r7, r7, #1
 8000a78:	6833      	ldr	r3, [r6, #0]
 8000a7a:	423b      	tst	r3, r7
 8000a7c:	d026      	beq.n	8000acc <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000a7e:	22c0      	movs	r2, #192	; 0xc0
 8000a80:	6a23      	ldr	r3, [r4, #32]
 8000a82:	0092      	lsls	r2, r2, #2
 8000a84:	4013      	ands	r3, r2
 8000a86:	4e2d      	ldr	r6, [pc, #180]	; (8000b3c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a88:	d132      	bne.n	8000af0 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000a8a:	6a23      	ldr	r3, [r4, #32]
 8000a8c:	401e      	ands	r6, r3
 8000a8e:	686b      	ldr	r3, [r5, #4]
 8000a90:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a92:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000a94:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d103      	bne.n	8000aa2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a9a:	69e3      	ldr	r3, [r4, #28]
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000aa2:	682a      	ldr	r2, [r5, #0]
 8000aa4:	07d3      	lsls	r3, r2, #31
 8000aa6:	d506      	bpl.n	8000ab6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000aa8:	2003      	movs	r0, #3
 8000aaa:	4922      	ldr	r1, [pc, #136]	; (8000b34 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000aac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000aae:	4383      	bics	r3, r0
 8000ab0:	68a8      	ldr	r0, [r5, #8]
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000ab6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000ab8:	0693      	lsls	r3, r2, #26
 8000aba:	d517      	bpl.n	8000aec <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000abc:	2110      	movs	r1, #16
 8000abe:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000ac0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ac2:	438b      	bics	r3, r1
 8000ac4:	68e9      	ldr	r1, [r5, #12]
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	e00f      	b.n	8000aec <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000acc:	6833      	ldr	r3, [r6, #0]
 8000ace:	433b      	orrs	r3, r7
 8000ad0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ad2:	f7ff fbd9 	bl	8000288 <HAL_GetTick>
 8000ad6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad8:	6833      	ldr	r3, [r6, #0]
 8000ada:	423b      	tst	r3, r7
 8000adc:	d1cf      	bne.n	8000a7e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ade:	f7ff fbd3 	bl	8000288 <HAL_GetTick>
 8000ae2:	9b01      	ldr	r3, [sp, #4]
 8000ae4:	1ac0      	subs	r0, r0, r3
 8000ae6:	2864      	cmp	r0, #100	; 0x64
 8000ae8:	d9f6      	bls.n	8000ad8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000aea:	2003      	movs	r0, #3
}
 8000aec:	b005      	add	sp, #20
 8000aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000af0:	6869      	ldr	r1, [r5, #4]
 8000af2:	400a      	ands	r2, r1
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d0c8      	beq.n	8000a8a <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000af8:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000afa:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000afc:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000afe:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000b00:	025b      	lsls	r3, r3, #9
 8000b02:	4303      	orrs	r3, r0
 8000b04:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000b06:	6a23      	ldr	r3, [r4, #32]
 8000b08:	480e      	ldr	r0, [pc, #56]	; (8000b44 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b0a:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000b0c:	4003      	ands	r3, r0
 8000b0e:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000b10:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000b12:	07d3      	lsls	r3, r2, #31
 8000b14:	d5b9      	bpl.n	8000a8a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000b16:	f7ff fbb7 	bl	8000288 <HAL_GetTick>
 8000b1a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	6a23      	ldr	r3, [r4, #32]
 8000b20:	4213      	tst	r3, r2
 8000b22:	d1b2      	bne.n	8000a8a <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b24:	f7ff fbb0 	bl	8000288 <HAL_GetTick>
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000b2a:	1bc0      	subs	r0, r0, r7
 8000b2c:	4298      	cmp	r0, r3
 8000b2e:	d9f5      	bls.n	8000b1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000b30:	e7db      	b.n	8000aea <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40007000 	.word	0x40007000
 8000b3c:	fffffcff 	.word	0xfffffcff
 8000b40:	efffffff 	.word	0xefffffff
 8000b44:	fffeffff 	.word	0xfffeffff
 8000b48:	00001388 	.word	0x00001388

08000b4c <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b4c:	21e0      	movs	r1, #224	; 0xe0
 8000b4e:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000b50:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	438a      	bics	r2, r1
 8000b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b58:	2282      	movs	r2, #130	; 0x82
 8000b5a:	6841      	ldr	r1, [r0, #4]
 8000b5c:	0052      	lsls	r2, r2, #1
 8000b5e:	4291      	cmp	r1, r2
 8000b60:	d10c      	bne.n	8000b7c <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	6882      	ldr	r2, [r0, #8]
 8000b66:	0209      	lsls	r1, r1, #8
 8000b68:	428a      	cmp	r2, r1
 8000b6a:	d003      	beq.n	8000b74 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	00c9      	lsls	r1, r1, #3
 8000b70:	428a      	cmp	r2, r1
 8000b72:	d103      	bne.n	8000b7c <SPI_WaitFifoStateUntilTimeout.part.1+0x30>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000b74:	2140      	movs	r1, #64	; 0x40
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	438a      	bics	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000b80:	0189      	lsls	r1, r1, #6
 8000b82:	428a      	cmp	r2, r1
 8000b84:	d106      	bne.n	8000b94 <SPI_WaitFifoStateUntilTimeout.part.1+0x48>
        {
          SPI_RESET_CRC(hspi);
 8000b86:	6819      	ldr	r1, [r3, #0]
 8000b88:	4c07      	ldr	r4, [pc, #28]	; (8000ba8 <SPI_WaitFifoStateUntilTimeout.part.1+0x5c>)
 8000b8a:	4021      	ands	r1, r4
 8000b8c:	6019      	str	r1, [r3, #0]
 8000b8e:	6819      	ldr	r1, [r3, #0]
 8000b90:	430a      	orrs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000b94:	0003      	movs	r3, r0
 8000b96:	2201      	movs	r2, #1
 8000b98:	335d      	adds	r3, #93	; 0x5d
 8000b9a:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	305c      	adds	r0, #92	; 0x5c
 8000ba0:	7003      	strb	r3, [r0, #0]
      }
    }
  }

  return HAL_OK;
}
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	bd10      	pop	{r4, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	ffffdfff 	.word	0xffffdfff

08000bac <SPI_WaitFlagStateUntilTimeout.constprop.9>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8000bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bae:	0005      	movs	r5, r0
 8000bb0:	000c      	movs	r4, r1
 8000bb2:	0016      	movs	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000bb4:	2780      	movs	r7, #128	; 0x80
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	6898      	ldr	r0, [r3, #8]
 8000bba:	4038      	ands	r0, r7
 8000bbc:	d006      	beq.n	8000bcc <SPI_WaitFlagStateUntilTimeout.constprop.9+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8000bbe:	1c62      	adds	r2, r4, #1
 8000bc0:	d0fa      	beq.n	8000bb8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000bc2:	2c00      	cmp	r4, #0
 8000bc4:	d103      	bne.n	8000bce <SPI_WaitFlagStateUntilTimeout.constprop.9+0x22>
 8000bc6:	0028      	movs	r0, r5
 8000bc8:	f7ff ffc0 	bl	8000b4c <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000bce:	f7ff fb5b 	bl	8000288 <HAL_GetTick>
 8000bd2:	1b80      	subs	r0, r0, r6
 8000bd4:	4284      	cmp	r4, r0
 8000bd6:	d8ee      	bhi.n	8000bb6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
 8000bd8:	e7f5      	b.n	8000bc6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x1a>

08000bda <SPI_WaitFifoStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000bda:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000bdc:	27c0      	movs	r7, #192	; 0xc0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8000bde:	0006      	movs	r6, r0
 8000be0:	000d      	movs	r5, r1
 8000be2:	0014      	movs	r4, r2
 8000be4:	b085      	sub	sp, #20
 8000be6:	9301      	str	r3, [sp, #4]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000be8:	00ff      	lsls	r7, r7, #3
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000bea:	ab02      	add	r3, sp, #8
  while ((hspi->Instance->SR & Fifo) != State)
 8000bec:	6831      	ldr	r1, [r6, #0]
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000bee:	1dda      	adds	r2, r3, #7
  while ((hspi->Instance->SR & Fifo) != State)
 8000bf0:	6888      	ldr	r0, [r1, #8]
 8000bf2:	4028      	ands	r0, r5
 8000bf4:	d00c      	beq.n	8000c10 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x36>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000bf6:	42bd      	cmp	r5, r7
 8000bf8:	d103      	bne.n	8000c02 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x28>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000bfa:	7b0b      	ldrb	r3, [r1, #12]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg);
 8000c00:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8000c02:	1c63      	adds	r3, r4, #1
 8000c04:	d0f4      	beq.n	8000bf0 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x16>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d104      	bne.n	8000c14 <SPI_WaitFifoStateUntilTimeout.constprop.10+0x3a>
 8000c0a:	0030      	movs	r0, r6
 8000c0c:	f7ff ff9e 	bl	8000b4c <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8000c10:	b005      	add	sp, #20
 8000c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c14:	f7ff fb38 	bl	8000288 <HAL_GetTick>
 8000c18:	9b01      	ldr	r3, [sp, #4]
 8000c1a:	1ac0      	subs	r0, r0, r3
 8000c1c:	4284      	cmp	r4, r0
 8000c1e:	d8e4      	bhi.n	8000bea <SPI_WaitFifoStateUntilTimeout.constprop.10+0x10>
 8000c20:	e7f3      	b.n	8000c0a <SPI_WaitFifoStateUntilTimeout.constprop.10+0x30>

08000c22 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c22:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c24:	0013      	movs	r3, r2
{
 8000c26:	000d      	movs	r5, r1
 8000c28:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	21c0      	movs	r1, #192	; 0xc0
 8000c2e:	0149      	lsls	r1, r1, #5
{
 8000c30:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c32:	f7ff ffd2 	bl	8000bda <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d005      	beq.n	8000c46 <SPI_EndRxTxTransaction+0x24>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000c3e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c40:	4313      	orrs	r3, r2
 8000c42:	6623      	str	r3, [r4, #96]	; 0x60
 8000c44:	e00f      	b.n	8000c66 <SPI_EndRxTxTransaction+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c46:	0032      	movs	r2, r6
 8000c48:	0029      	movs	r1, r5
 8000c4a:	0020      	movs	r0, r4
 8000c4c:	f7ff ffae 	bl	8000bac <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d1f2      	bne.n	8000c3a <SPI_EndRxTxTransaction+0x18>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000c54:	21c0      	movs	r1, #192	; 0xc0
 8000c56:	0033      	movs	r3, r6
 8000c58:	002a      	movs	r2, r5
 8000c5a:	00c9      	lsls	r1, r1, #3
 8000c5c:	0020      	movs	r0, r4
 8000c5e:	f7ff ffbc 	bl	8000bda <SPI_WaitFifoStateUntilTimeout.constprop.10>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d1e9      	bne.n	8000c3a <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000c66:	bd70      	pop	{r4, r5, r6, pc}

08000c68 <HAL_SPI_Init>:
{
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c6c:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000c6e:	2c00      	cmp	r4, #0
 8000c70:	d04b      	beq.n	8000d0a <HAL_SPI_Init+0xa2>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c72:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c74:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c76:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c78:	355d      	adds	r5, #93	; 0x5d
 8000c7a:	782b      	ldrb	r3, [r5, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d105      	bne.n	8000c8e <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8000c82:	0022      	movs	r2, r4
 8000c84:	325c      	adds	r2, #92	; 0x5c
 8000c86:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8000c88:	0020      	movs	r0, r4
 8000c8a:	f000 fe6d 	bl	8001968 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c8e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c94:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000c96:	680b      	ldr	r3, [r1, #0]
 8000c98:	2000      	movs	r0, #0
 8000c9a:	4393      	bics	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
 8000c9e:	23e0      	movs	r3, #224	; 0xe0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000ca0:	68e2      	ldr	r2, [r4, #12]
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d931      	bls.n	8000d0c <HAL_SPI_Init+0xa4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000ca8:	26f0      	movs	r6, #240	; 0xf0
 8000caa:	0136      	lsls	r6, r6, #4
 8000cac:	42b2      	cmp	r2, r6
 8000cae:	d133      	bne.n	8000d18 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000cb0:	0006      	movs	r6, r0
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000cb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000cb4:	2800      	cmp	r0, #0
 8000cb6:	d103      	bne.n	8000cc0 <HAL_SPI_Init+0x58>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d92f      	bls.n	8000d1c <HAL_SPI_Init+0xb4>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000cbc:	2302      	movs	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000cbe:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000cc0:	68a7      	ldr	r7, [r4, #8]
 8000cc2:	6863      	ldr	r3, [r4, #4]
 8000cc4:	69a0      	ldr	r0, [r4, #24]
 8000cc6:	433b      	orrs	r3, r7
 8000cc8:	6927      	ldr	r7, [r4, #16]
 8000cca:	433b      	orrs	r3, r7
 8000ccc:	6967      	ldr	r7, [r4, #20]
 8000cce:	433b      	orrs	r3, r7
 8000cd0:	69e7      	ldr	r7, [r4, #28]
 8000cd2:	433b      	orrs	r3, r7
 8000cd4:	6a27      	ldr	r7, [r4, #32]
 8000cd6:	433b      	orrs	r3, r7
 8000cd8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000cda:	433b      	orrs	r3, r7
 8000cdc:	2780      	movs	r7, #128	; 0x80
 8000cde:	00bf      	lsls	r7, r7, #2
 8000ce0:	4007      	ands	r7, r0
 8000ce2:	433b      	orrs	r3, r7
 8000ce4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ce8:	0c00      	lsrs	r0, r0, #16
 8000cea:	431a      	orrs	r2, r3
 8000cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	4018      	ands	r0, r3
 8000cf4:	4310      	orrs	r0, r2
 8000cf6:	4306      	orrs	r6, r0
 8000cf8:	604e      	str	r6, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000cfa:	69cb      	ldr	r3, [r1, #28]
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_SPI_Init+0xb8>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000cfe:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d00:	4013      	ands	r3, r2
 8000d02:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000d04:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d06:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000d08:	702b      	strb	r3, [r5, #0]
}
 8000d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000d0c:	2680      	movs	r6, #128	; 0x80
 8000d0e:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d0ce      	beq.n	8000cb2 <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d14:	62a0      	str	r0, [r4, #40]	; 0x28
 8000d16:	e7cc      	b.n	8000cb2 <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000d18:	0006      	movs	r6, r0
 8000d1a:	e7fb      	b.n	8000d14 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e7ce      	b.n	8000cbe <HAL_SPI_Init+0x56>
 8000d20:	fffff7ff 	.word	0xfffff7ff

08000d24 <HAL_SPI_Transmit>:
{
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d26:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8000d28:	0003      	movs	r3, r0
{
 8000d2a:	b087      	sub	sp, #28
  __HAL_LOCK(hspi);
 8000d2c:	335c      	adds	r3, #92	; 0x5c
{
 8000d2e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hspi);
 8000d30:	9302      	str	r3, [sp, #8]
 8000d32:	781b      	ldrb	r3, [r3, #0]
{
 8000d34:	0004      	movs	r4, r0
 8000d36:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8000d38:	2602      	movs	r6, #2
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d100      	bne.n	8000d40 <HAL_SPI_Transmit+0x1c>
 8000d3e:	e07a      	b.n	8000e36 <HAL_SPI_Transmit+0x112>
 8000d40:	2301      	movs	r3, #1
 8000d42:	9a02      	ldr	r2, [sp, #8]
 8000d44:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000d46:	f7ff fa9f 	bl	8000288 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000d4a:	0023      	movs	r3, r4
 8000d4c:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 8000d4e:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8000d50:	9303      	str	r3, [sp, #12]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d167      	bne.n	8000e2a <HAL_SPI_Transmit+0x106>
    errorcode = HAL_ERROR;
 8000d5a:	001e      	movs	r6, r3
  if ((pData == NULL) || (Size == 0U))
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d064      	beq.n	8000e2a <HAL_SPI_Transmit+0x106>
 8000d60:	9b01      	ldr	r3, [sp, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d061      	beq.n	8000e2a <HAL_SPI_Transmit+0x106>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000d66:	2303      	movs	r3, #3
 8000d68:	9a03      	ldr	r2, [sp, #12]
 8000d6a:	7013      	strb	r3, [r2, #0]
  hspi->TxXferSize  = Size;
 8000d6c:	466a      	mov	r2, sp
 8000d6e:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d70:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8000d72:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8000d74:	466a      	mov	r2, sp
 8000d76:	8892      	ldrh	r2, [r2, #4]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d78:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8000d7a:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000d7c:	1da2      	adds	r2, r4, #6
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000d7e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000d80:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8000d82:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8000d84:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000d86:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000d88:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000d8a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d8c:	2380      	movs	r3, #128	; 0x80
 8000d8e:	68a2      	ldr	r2, [r4, #8]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d105      	bne.n	8000da2 <HAL_SPI_Transmit+0x7e>
    SPI_1LINE_TX(hspi);
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	6822      	ldr	r2, [r4, #0]
 8000d9a:	01db      	lsls	r3, r3, #7
 8000d9c:	6811      	ldr	r1, [r2, #0]
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000da2:	2240      	movs	r2, #64	; 0x40
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	6819      	ldr	r1, [r3, #0]
 8000da8:	4211      	tst	r1, r2
 8000daa:	d102      	bne.n	8000db2 <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000db2:	21e0      	movs	r1, #224	; 0xe0
 8000db4:	68e0      	ldr	r0, [r4, #12]
 8000db6:	00c9      	lsls	r1, r1, #3
 8000db8:	6862      	ldr	r2, [r4, #4]
 8000dba:	4288      	cmp	r0, r1
 8000dbc:	d947      	bls.n	8000e4e <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000dbe:	2a00      	cmp	r2, #0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_SPI_Transmit+0xa4>
 8000dc2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000dc4:	2a01      	cmp	r2, #1
 8000dc6:	d106      	bne.n	8000dd6 <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000dc8:	882a      	ldrh	r2, [r5, #0]
      pData += sizeof(uint16_t);
 8000dca:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)pData);
 8000dcc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000dce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000dd6:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8000dd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d116      	bne.n	8000e0c <HAL_SPI_Transmit+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000dde:	9a00      	ldr	r2, [sp, #0]
 8000de0:	0039      	movs	r1, r7
 8000de2:	0020      	movs	r0, r4
 8000de4:	f7ff ff1d 	bl	8000c22 <SPI_EndRxTxTransaction>
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d000      	beq.n	8000dee <HAL_SPI_Transmit+0xca>
 8000dec:	e06c      	b.n	8000ec8 <HAL_SPI_Transmit+0x1a4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000dee:	68a3      	ldr	r3, [r4, #8]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d106      	bne.n	8000e02 <HAL_SPI_Transmit+0xde>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000df4:	9305      	str	r3, [sp, #20]
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	9205      	str	r2, [sp, #20]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	9305      	str	r3, [sp, #20]
 8000e00:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e02:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8000e04:	1e73      	subs	r3, r6, #1
 8000e06:	419e      	sbcs	r6, r3
    errorcode = HAL_BUSY;
 8000e08:	b2f6      	uxtb	r6, r6
 8000e0a:	e00e      	b.n	8000e2a <HAL_SPI_Transmit+0x106>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	4232      	tst	r2, r6
 8000e12:	d007      	beq.n	8000e24 <HAL_SPI_Transmit+0x100>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e14:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 8000e16:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e18:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000e1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000e22:	e7d9      	b.n	8000dd8 <HAL_SPI_Transmit+0xb4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000e24:	2f00      	cmp	r7, #0
 8000e26:	d109      	bne.n	8000e3c <HAL_SPI_Transmit+0x118>
          errorcode = HAL_TIMEOUT;
 8000e28:	2603      	movs	r6, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	9a03      	ldr	r2, [sp, #12]
 8000e2e:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8000e30:	2300      	movs	r3, #0
 8000e32:	9a02      	ldr	r2, [sp, #8]
 8000e34:	7013      	strb	r3, [r2, #0]
}
 8000e36:	0030      	movs	r0, r6
 8000e38:	b007      	add	sp, #28
 8000e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000e3c:	1c7b      	adds	r3, r7, #1
 8000e3e:	d0cb      	beq.n	8000dd8 <HAL_SPI_Transmit+0xb4>
 8000e40:	f7ff fa22 	bl	8000288 <HAL_GetTick>
 8000e44:	9b00      	ldr	r3, [sp, #0]
 8000e46:	1ac0      	subs	r0, r0, r3
 8000e48:	4287      	cmp	r7, r0
 8000e4a:	d8c5      	bhi.n	8000dd8 <HAL_SPI_Transmit+0xb4>
 8000e4c:	e7ec      	b.n	8000e28 <HAL_SPI_Transmit+0x104>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000e4e:	2a00      	cmp	r2, #0
 8000e50:	d002      	beq.n	8000e58 <HAL_SPI_Transmit+0x134>
 8000e52:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000e54:	2a01      	cmp	r2, #1
 8000e56:	d109      	bne.n	8000e6c <HAL_SPI_Transmit+0x148>
      if (hspi->TxXferCount > 1U)
 8000e58:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000e5a:	2a01      	cmp	r2, #1
 8000e5c:	d919      	bls.n	8000e92 <HAL_SPI_Transmit+0x16e>
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e5e:	882a      	ldrh	r2, [r5, #0]
        pData += sizeof(uint16_t);
 8000e60:	3502      	adds	r5, #2
        hspi->Instance->DR = *((uint16_t *)pData);
 8000e62:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8000e64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e66:	3b02      	subs	r3, #2
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e6c:	2602      	movs	r6, #2
    while (hspi->TxXferCount > 0U)
 8000e6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0b4      	beq.n	8000dde <HAL_SPI_Transmit+0xba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	4232      	tst	r2, r6
 8000e7a:	d01a      	beq.n	8000eb2 <HAL_SPI_Transmit+0x18e>
        if (hspi->TxXferCount > 1U)
 8000e7c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8000e7e:	2a01      	cmp	r2, #1
 8000e80:	d90f      	bls.n	8000ea2 <HAL_SPI_Transmit+0x17e>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e82:	882a      	ldrh	r2, [r5, #0]
          pData += sizeof(uint16_t);
 8000e84:	3502      	adds	r5, #2
          hspi->Instance->DR = *((uint16_t *)pData);
 8000e86:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8000e88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e8a:	3b02      	subs	r3, #2
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000e90:	e7ed      	b.n	8000e6e <HAL_SPI_Transmit+0x14a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000e92:	782a      	ldrb	r2, [r5, #0]
 8000e94:	3501      	adds	r5, #1
 8000e96:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000e98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000ea0:	e7e4      	b.n	8000e6c <HAL_SPI_Transmit+0x148>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000ea2:	782a      	ldrb	r2, [r5, #0]
 8000ea4:	3501      	adds	r5, #1
 8000ea6:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8000ea8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000eb0:	e7dd      	b.n	8000e6e <HAL_SPI_Transmit+0x14a>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000eb2:	2f00      	cmp	r7, #0
 8000eb4:	d0b8      	beq.n	8000e28 <HAL_SPI_Transmit+0x104>
 8000eb6:	1c7b      	adds	r3, r7, #1
 8000eb8:	d0d9      	beq.n	8000e6e <HAL_SPI_Transmit+0x14a>
 8000eba:	f7ff f9e5 	bl	8000288 <HAL_GetTick>
 8000ebe:	9b00      	ldr	r3, [sp, #0]
 8000ec0:	1ac0      	subs	r0, r0, r3
 8000ec2:	4287      	cmp	r7, r0
 8000ec4:	d8d3      	bhi.n	8000e6e <HAL_SPI_Transmit+0x14a>
 8000ec6:	e7af      	b.n	8000e28 <HAL_SPI_Transmit+0x104>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000ec8:	2320      	movs	r3, #32
 8000eca:	6623      	str	r3, [r4, #96]	; 0x60
 8000ecc:	e78f      	b.n	8000dee <HAL_SPI_Transmit+0xca>

08000ece <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	6803      	ldr	r3, [r0, #0]
 8000ed2:	68d9      	ldr	r1, [r3, #12]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000ed4:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ed6:	4311      	orrs	r1, r2
 8000ed8:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_TIM_OC_DelayElapsedCallback>:
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_TIM_IC_CaptureCallback>:
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_TIM_TriggerCallback>:
 8000ee8:	4770      	bx	lr

08000eea <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000eea:	2202      	movs	r2, #2
 8000eec:	6803      	ldr	r3, [r0, #0]
{
 8000eee:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ef0:	6919      	ldr	r1, [r3, #16]
{
 8000ef2:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ef4:	4211      	tst	r1, r2
 8000ef6:	d00e      	beq.n	8000f16 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000ef8:	68d9      	ldr	r1, [r3, #12]
 8000efa:	4211      	tst	r1, r2
 8000efc:	d00b      	beq.n	8000f16 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000efe:	3a05      	subs	r2, #5
 8000f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f02:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f04:	3204      	adds	r2, #4
 8000f06:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f08:	079b      	lsls	r3, r3, #30
 8000f0a:	d100      	bne.n	8000f0e <HAL_TIM_IRQHandler+0x24>
 8000f0c:	e079      	b.n	8001002 <HAL_TIM_IRQHandler+0x118>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000f0e:	f7ff ffe9 	bl	8000ee4 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f12:	2300      	movs	r3, #0
 8000f14:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f16:	2204      	movs	r2, #4
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	6919      	ldr	r1, [r3, #16]
 8000f1c:	4211      	tst	r1, r2
 8000f1e:	d010      	beq.n	8000f42 <HAL_TIM_IRQHandler+0x58>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f20:	68d9      	ldr	r1, [r3, #12]
 8000f22:	4211      	tst	r1, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f26:	3a09      	subs	r2, #9
 8000f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f2a:	3207      	adds	r2, #7
 8000f2c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	23c0      	movs	r3, #192	; 0xc0
 8000f32:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000f34:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f36:	421a      	tst	r2, r3
 8000f38:	d069      	beq.n	800100e <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f3a:	f7ff ffd3 	bl	8000ee4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f42:	2208      	movs	r2, #8
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	6919      	ldr	r1, [r3, #16]
 8000f48:	4211      	tst	r1, r2
 8000f4a:	d00e      	beq.n	8000f6a <HAL_TIM_IRQHandler+0x80>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000f4c:	68d9      	ldr	r1, [r3, #12]
 8000f4e:	4211      	tst	r1, r2
 8000f50:	d00b      	beq.n	8000f6a <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f52:	3a11      	subs	r2, #17
 8000f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f56:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f58:	320d      	adds	r2, #13
 8000f5a:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000f5c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f5e:	079b      	lsls	r3, r3, #30
 8000f60:	d05b      	beq.n	800101a <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f62:	f7ff ffbf 	bl	8000ee4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f66:	2300      	movs	r3, #0
 8000f68:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	6919      	ldr	r1, [r3, #16]
 8000f70:	4211      	tst	r1, r2
 8000f72:	d010      	beq.n	8000f96 <HAL_TIM_IRQHandler+0xac>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000f74:	68d9      	ldr	r1, [r3, #12]
 8000f76:	4211      	tst	r1, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f7a:	3a21      	subs	r2, #33	; 0x21
 8000f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f7e:	3219      	adds	r2, #25
 8000f80:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f82:	69da      	ldr	r2, [r3, #28]
 8000f84:	23c0      	movs	r3, #192	; 0xc0
 8000f86:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000f88:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f8a:	421a      	tst	r2, r3
 8000f8c:	d04b      	beq.n	8001026 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f8e:	f7ff ffa9 	bl	8000ee4 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f92:	2300      	movs	r3, #0
 8000f94:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f96:	2201      	movs	r2, #1
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	6919      	ldr	r1, [r3, #16]
 8000f9c:	4211      	tst	r1, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_TIM_IRQHandler+0xc6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000fa0:	68d9      	ldr	r1, [r3, #12]
 8000fa2:	4211      	tst	r1, r2
 8000fa4:	d004      	beq.n	8000fb0 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fa6:	3a03      	subs	r2, #3
 8000fa8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000faa:	0020      	movs	r0, r4
 8000fac:	f000 fca6 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	6919      	ldr	r1, [r3, #16]
 8000fb6:	4211      	tst	r1, r2
 8000fb8:	d008      	beq.n	8000fcc <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000fba:	68d9      	ldr	r1, [r3, #12]
 8000fbc:	4211      	tst	r1, r2
 8000fbe:	d005      	beq.n	8000fcc <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000fc0:	3a02      	subs	r2, #2
 8000fc2:	3aff      	subs	r2, #255	; 0xff
 8000fc4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000fc6:	0020      	movs	r0, r4
 8000fc8:	f000 f97a 	bl	80012c0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000fcc:	2240      	movs	r2, #64	; 0x40
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	6919      	ldr	r1, [r3, #16]
 8000fd2:	4211      	tst	r1, r2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_TIM_IRQHandler+0xfc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000fd6:	68d9      	ldr	r1, [r3, #12]
 8000fd8:	4211      	tst	r1, r2
 8000fda:	d004      	beq.n	8000fe6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000fdc:	3a81      	subs	r2, #129	; 0x81
 8000fde:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff ff81 	bl	8000ee8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000fe6:	2220      	movs	r2, #32
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	6919      	ldr	r1, [r3, #16]
 8000fec:	4211      	tst	r1, r2
 8000fee:	d007      	beq.n	8001000 <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000ff0:	68d9      	ldr	r1, [r3, #12]
 8000ff2:	4211      	tst	r1, r2
 8000ff4:	d004      	beq.n	8001000 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ff6:	3a41      	subs	r2, #65	; 0x41
 8000ff8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000ffa:	0020      	movs	r0, r4
 8000ffc:	f000 f95f 	bl	80012be <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001000:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001002:	f7ff ff6e 	bl	8000ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001006:	0020      	movs	r0, r4
 8001008:	f7ff ff6d 	bl	8000ee6 <HAL_TIM_PWM_PulseFinishedCallback>
 800100c:	e781      	b.n	8000f12 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800100e:	f7ff ff68 	bl	8000ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001012:	0020      	movs	r0, r4
 8001014:	f7ff ff67 	bl	8000ee6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001018:	e791      	b.n	8000f3e <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800101a:	f7ff ff62 	bl	8000ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800101e:	0020      	movs	r0, r4
 8001020:	f7ff ff61 	bl	8000ee6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001024:	e79f      	b.n	8000f66 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001026:	f7ff ff5c 	bl	8000ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800102a:	0020      	movs	r0, r4
 800102c:	f7ff ff5b 	bl	8000ee6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001030:	e7af      	b.n	8000f92 <HAL_TIM_IRQHandler+0xa8>
	...

08001034 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <TIM_Base_SetConfig+0x78>)
{
 8001036:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001038:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800103a:	4290      	cmp	r0, r2
 800103c:	d006      	beq.n	800104c <TIM_Base_SetConfig+0x18>
 800103e:	2480      	movs	r4, #128	; 0x80
 8001040:	05e4      	lsls	r4, r4, #23
 8001042:	42a0      	cmp	r0, r4
 8001044:	d002      	beq.n	800104c <TIM_Base_SetConfig+0x18>
 8001046:	4c1a      	ldr	r4, [pc, #104]	; (80010b0 <TIM_Base_SetConfig+0x7c>)
 8001048:	42a0      	cmp	r0, r4
 800104a:	d10c      	bne.n	8001066 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800104c:	2470      	movs	r4, #112	; 0x70
 800104e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001050:	684c      	ldr	r4, [r1, #4]
 8001052:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001054:	4290      	cmp	r0, r2
 8001056:	d00f      	beq.n	8001078 <TIM_Base_SetConfig+0x44>
 8001058:	2480      	movs	r4, #128	; 0x80
 800105a:	05e4      	lsls	r4, r4, #23
 800105c:	42a0      	cmp	r0, r4
 800105e:	d00b      	beq.n	8001078 <TIM_Base_SetConfig+0x44>
 8001060:	4c13      	ldr	r4, [pc, #76]	; (80010b0 <TIM_Base_SetConfig+0x7c>)
 8001062:	42a0      	cmp	r0, r4
 8001064:	d008      	beq.n	8001078 <TIM_Base_SetConfig+0x44>
 8001066:	4c13      	ldr	r4, [pc, #76]	; (80010b4 <TIM_Base_SetConfig+0x80>)
 8001068:	42a0      	cmp	r0, r4
 800106a:	d005      	beq.n	8001078 <TIM_Base_SetConfig+0x44>
 800106c:	4c12      	ldr	r4, [pc, #72]	; (80010b8 <TIM_Base_SetConfig+0x84>)
 800106e:	42a0      	cmp	r0, r4
 8001070:	d002      	beq.n	8001078 <TIM_Base_SetConfig+0x44>
 8001072:	4c12      	ldr	r4, [pc, #72]	; (80010bc <TIM_Base_SetConfig+0x88>)
 8001074:	42a0      	cmp	r0, r4
 8001076:	d103      	bne.n	8001080 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001078:	4c11      	ldr	r4, [pc, #68]	; (80010c0 <TIM_Base_SetConfig+0x8c>)
 800107a:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800107c:	68cc      	ldr	r4, [r1, #12]
 800107e:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001080:	2480      	movs	r4, #128	; 0x80
 8001082:	43a3      	bics	r3, r4
 8001084:	694c      	ldr	r4, [r1, #20]
 8001086:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8001088:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800108a:	688b      	ldr	r3, [r1, #8]
 800108c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800108e:	680b      	ldr	r3, [r1, #0]
 8001090:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001092:	4290      	cmp	r0, r2
 8001094:	d005      	beq.n	80010a2 <TIM_Base_SetConfig+0x6e>
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <TIM_Base_SetConfig+0x84>)
 8001098:	4298      	cmp	r0, r3
 800109a:	d002      	beq.n	80010a2 <TIM_Base_SetConfig+0x6e>
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <TIM_Base_SetConfig+0x88>)
 800109e:	4298      	cmp	r0, r3
 80010a0:	d101      	bne.n	80010a6 <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80010a2:	690b      	ldr	r3, [r1, #16]
 80010a4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80010a6:	2301      	movs	r3, #1
 80010a8:	6143      	str	r3, [r0, #20]
}
 80010aa:	bd10      	pop	{r4, pc}
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	40000400 	.word	0x40000400
 80010b4:	40002000 	.word	0x40002000
 80010b8:	40014400 	.word	0x40014400
 80010bc:	40014800 	.word	0x40014800
 80010c0:	fffffcff 	.word	0xfffffcff

080010c4 <HAL_TIM_Base_Init>:
{
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80010c8:	2001      	movs	r0, #1
  if(htim == NULL)
 80010ca:	2c00      	cmp	r4, #0
 80010cc:	d014      	beq.n	80010f8 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80010ce:	0025      	movs	r5, r4
 80010d0:	353d      	adds	r5, #61	; 0x3d
 80010d2:	782b      	ldrb	r3, [r5, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d105      	bne.n	80010e6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80010da:	0022      	movs	r2, r4
 80010dc:	323c      	adds	r2, #60	; 0x3c
 80010de:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80010e0:	0020      	movs	r0, r4
 80010e2:	f000 fc71 	bl	80019c8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80010e6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010e8:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80010ea:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010ec:	1d21      	adds	r1, r4, #4
 80010ee:	f7ff ffa1 	bl	8001034 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80010f2:	2301      	movs	r3, #1
  return HAL_OK;
 80010f4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80010f6:	702b      	strb	r3, [r5, #0]
}
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080010fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80010fc:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80010fe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001100:	4d03      	ldr	r5, [pc, #12]	; (8001110 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001102:	430a      	orrs	r2, r1
 8001104:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001106:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001108:	4313      	orrs	r3, r2
 800110a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800110c:	6083      	str	r3, [r0, #8]
}
 800110e:	bd30      	pop	{r4, r5, pc}
 8001110:	ffff00ff 	.word	0xffff00ff

08001114 <HAL_TIM_ConfigClockSource>:
{
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001116:	0005      	movs	r5, r0
 8001118:	2302      	movs	r3, #2
 800111a:	353c      	adds	r5, #60	; 0x3c
 800111c:	782a      	ldrb	r2, [r5, #0]
{
 800111e:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001120:	0018      	movs	r0, r3
 8001122:	2a01      	cmp	r2, #1
 8001124:	d019      	beq.n	800115a <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001126:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001128:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 800112a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800112c:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 800112e:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001130:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001132:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001134:	4a4f      	ldr	r2, [pc, #316]	; (8001274 <HAL_TIM_ConfigClockSource+0x160>)
 8001136:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001138:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800113a:	680b      	ldr	r3, [r1, #0]
 800113c:	2b40      	cmp	r3, #64	; 0x40
 800113e:	d100      	bne.n	8001142 <HAL_TIM_ConfigClockSource+0x2e>
 8001140:	e06f      	b.n	8001222 <HAL_TIM_ConfigClockSource+0x10e>
 8001142:	d816      	bhi.n	8001172 <HAL_TIM_ConfigClockSource+0x5e>
 8001144:	2b10      	cmp	r3, #16
 8001146:	d100      	bne.n	800114a <HAL_TIM_ConfigClockSource+0x36>
 8001148:	e087      	b.n	800125a <HAL_TIM_ConfigClockSource+0x146>
 800114a:	d807      	bhi.n	800115c <HAL_TIM_ConfigClockSource+0x48>
 800114c:	2b00      	cmp	r3, #0
 800114e:	d100      	bne.n	8001152 <HAL_TIM_ConfigClockSource+0x3e>
 8001150:	e07d      	b.n	800124e <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 8001152:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001154:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001156:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001158:	7028      	strb	r0, [r5, #0]
}
 800115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800115c:	2b20      	cmp	r3, #32
 800115e:	d100      	bne.n	8001162 <HAL_TIM_ConfigClockSource+0x4e>
 8001160:	e081      	b.n	8001266 <HAL_TIM_ConfigClockSource+0x152>
 8001162:	2b30      	cmp	r3, #48	; 0x30
 8001164:	d1f5      	bne.n	8001152 <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001166:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001168:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800116a:	4393      	bics	r3, r2
 800116c:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800116e:	2337      	movs	r3, #55	; 0x37
 8001170:	e055      	b.n	800121e <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8001172:	2b70      	cmp	r3, #112	; 0x70
 8001174:	d033      	beq.n	80011de <HAL_TIM_ConfigClockSource+0xca>
 8001176:	d81b      	bhi.n	80011b0 <HAL_TIM_ConfigClockSource+0x9c>
 8001178:	2b50      	cmp	r3, #80	; 0x50
 800117a:	d03b      	beq.n	80011f4 <HAL_TIM_ConfigClockSource+0xe0>
 800117c:	2b60      	cmp	r3, #96	; 0x60
 800117e:	d1e8      	bne.n	8001152 <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001180:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001182:	684b      	ldr	r3, [r1, #4]
 8001184:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001186:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001188:	4f3b      	ldr	r7, [pc, #236]	; (8001278 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800118a:	43a1      	bics	r1, r4
 800118c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800118e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001190:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001192:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001194:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001196:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001198:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800119a:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 800119c:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800119e:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 80011a4:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80011a6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011a8:	4393      	bics	r3, r2
 80011aa:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011ac:	2367      	movs	r3, #103	; 0x67
 80011ae:	e036      	b.n	800121e <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	0152      	lsls	r2, r2, #5
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d00d      	beq.n	80011d4 <HAL_TIM_ConfigClockSource+0xc0>
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	0192      	lsls	r2, r2, #6
 80011bc:	4293      	cmp	r3, r2
 80011be:	d1c8      	bne.n	8001152 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 80011c0:	68cb      	ldr	r3, [r1, #12]
 80011c2:	684a      	ldr	r2, [r1, #4]
 80011c4:	6889      	ldr	r1, [r1, #8]
 80011c6:	f7ff ff99 	bl	80010fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	6822      	ldr	r2, [r4, #0]
 80011ce:	01db      	lsls	r3, r3, #7
 80011d0:	6891      	ldr	r1, [r2, #8]
 80011d2:	e00c      	b.n	80011ee <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80011d4:	2207      	movs	r2, #7
 80011d6:	6883      	ldr	r3, [r0, #8]
 80011d8:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 80011da:	6083      	str	r3, [r0, #8]
 80011dc:	e7b9      	b.n	8001152 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 80011de:	68cb      	ldr	r3, [r1, #12]
 80011e0:	684a      	ldr	r2, [r1, #4]
 80011e2:	6889      	ldr	r1, [r1, #8]
 80011e4:	f7ff ff8a 	bl	80010fc <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80011e8:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80011ea:	6822      	ldr	r2, [r4, #0]
 80011ec:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80011ee:	430b      	orrs	r3, r1
 80011f0:	6093      	str	r3, [r2, #8]
    break;
 80011f2:	e7ae      	b.n	8001152 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80011f4:	684a      	ldr	r2, [r1, #4]
 80011f6:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80011f8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011fa:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80011fc:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011fe:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001200:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001202:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001204:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001206:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001208:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800120a:	240a      	movs	r4, #10
 800120c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800120e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001210:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001212:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001214:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001216:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001218:	4393      	bics	r3, r2
 800121a:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800121c:	2357      	movs	r3, #87	; 0x57
 800121e:	4313      	orrs	r3, r2
 8001220:	e7db      	b.n	80011da <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001222:	684a      	ldr	r2, [r1, #4]
 8001224:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001226:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001228:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800122a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800122c:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800122e:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001230:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001232:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001234:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001236:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001238:	240a      	movs	r4, #10
 800123a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800123c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800123e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001240:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001242:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001244:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001246:	4393      	bics	r3, r2
 8001248:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800124a:	2347      	movs	r3, #71	; 0x47
 800124c:	e7e7      	b.n	800121e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800124e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001250:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001252:	4393      	bics	r3, r2
 8001254:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001256:	2307      	movs	r3, #7
 8001258:	e7e1      	b.n	800121e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800125a:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800125c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800125e:	4393      	bics	r3, r2
 8001260:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001262:	2317      	movs	r3, #23
 8001264:	e7db      	b.n	800121e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001266:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001268:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800126a:	4393      	bics	r3, r2
 800126c:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800126e:	2327      	movs	r3, #39	; 0x27
 8001270:	e7d5      	b.n	800121e <HAL_TIM_ConfigClockSource+0x10a>
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	ffff0088 	.word	0xffff0088
 8001278:	ffff0fff 	.word	0xffff0fff

0800127c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800127c:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800127e:	0004      	movs	r4, r0
 8001280:	343c      	adds	r4, #60	; 0x3c
 8001282:	7822      	ldrb	r2, [r4, #0]
{
 8001284:	0003      	movs	r3, r0
 8001286:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001288:	2a01      	cmp	r2, #1
 800128a:	d017      	beq.n	80012bc <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 800128c:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800128e:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001290:	353d      	adds	r5, #61	; 0x3d
 8001292:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	306e      	adds	r0, #110	; 0x6e
 8001298:	4382      	bics	r2, r0
 800129a:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80012a0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80012a2:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80012a4:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80012a6:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	4382      	bics	r2, r0
 80012ac:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80012ae:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80012b0:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80012b2:	430a      	orrs	r2, r1
 80012b4:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80012b6:	2301      	movs	r3, #1
 80012b8:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80012ba:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80012bc:	bd30      	pop	{r4, r5, pc}

080012be <HAL_TIMEx_CommutationCallback>:
 80012be:	4770      	bx	lr

080012c0 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80012c0:	4770      	bx	lr
	...

080012c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012c4:	b570      	push	{r4, r5, r6, lr}
 80012c6:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012c8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012ca:	69c2      	ldr	r2, [r0, #28]
 80012cc:	6883      	ldr	r3, [r0, #8]
 80012ce:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012d0:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012d2:	4303      	orrs	r3, r0
 80012d4:	6960      	ldr	r0, [r4, #20]
 80012d6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012d8:	4835      	ldr	r0, [pc, #212]	; (80013b0 <UART_SetConfig+0xec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80012da:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80012dc:	4001      	ands	r1, r0
 80012de:	430b      	orrs	r3, r1
 80012e0:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012e2:	686b      	ldr	r3, [r5, #4]
 80012e4:	4933      	ldr	r1, [pc, #204]	; (80013b4 <UART_SetConfig+0xf0>)
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012e6:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012e8:	400b      	ands	r3, r1
 80012ea:	68e1      	ldr	r1, [r4, #12]
 80012ec:	430b      	orrs	r3, r1
 80012ee:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012f0:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012f2:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80012f4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012f6:	4830      	ldr	r0, [pc, #192]	; (80013b8 <UART_SetConfig+0xf4>)
 80012f8:	4001      	ands	r1, r0
 80012fa:	430b      	orrs	r3, r1

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012fc:	2103      	movs	r1, #3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80012fe:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <UART_SetConfig+0xf8>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	400b      	ands	r3, r1
 8001306:	492e      	ldr	r1, [pc, #184]	; (80013c0 <UART_SetConfig+0xfc>)
 8001308:	5cc8      	ldrb	r0, [r1, r3]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	429a      	cmp	r2, r3
 8001310:	d12c      	bne.n	800136c <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001312:	2808      	cmp	r0, #8
 8001314:	d827      	bhi.n	8001366 <UART_SetConfig+0xa2>
 8001316:	f7fe fef7 	bl	8000108 <__gnu_thumb1_case_uqi>
 800131a:	2605      	.short	0x2605
 800131c:	261e260b 	.word	0x261e260b
 8001320:	2626      	.short	0x2626
 8001322:	21          	.byte	0x21
 8001323:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001324:	f7ff fb7e 	bl	8000a24 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001328:	6863      	ldr	r3, [r4, #4]
 800132a:	0040      	lsls	r0, r0, #1
 800132c:	085b      	lsrs	r3, r3, #1
 800132e:	e002      	b.n	8001336 <UART_SetConfig+0x72>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001330:	6863      	ldr	r3, [r4, #4]
 8001332:	0858      	lsrs	r0, r3, #1
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <UART_SetConfig+0x100>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001336:	18c0      	adds	r0, r0, r3
 8001338:	6861      	ldr	r1, [r4, #4]
 800133a:	f7fe feef 	bl	800011c <__udivsi3>
 800133e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001340:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001342:	220f      	movs	r2, #15
 8001344:	0019      	movs	r1, r3
 8001346:	4391      	bics	r1, r2
 8001348:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800134a:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 800134c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800134e:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001350:	4313      	orrs	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8001354:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001356:	f7ff fa97 	bl	8000888 <HAL_RCC_GetSysClockFreq>
 800135a:	e7e5      	b.n	8001328 <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800135c:	6863      	ldr	r3, [r4, #4]
 800135e:	0858      	lsrs	r0, r3, #1
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	e7e7      	b.n	8001336 <UART_SetConfig+0x72>
        ret = HAL_ERROR;
 8001366:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001368:	2300      	movs	r3, #0
 800136a:	e7ea      	b.n	8001342 <UART_SetConfig+0x7e>
    switch (clocksource)
 800136c:	2808      	cmp	r0, #8
 800136e:	d81d      	bhi.n	80013ac <UART_SetConfig+0xe8>
 8001370:	f7fe feca 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001374:	1c0a1c05 	.word	0x1c0a1c05
 8001378:	1c1c1c14 	.word	0x1c1c1c14
 800137c:	17          	.byte	0x17
 800137d:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800137e:	f7ff fb51 	bl	8000a24 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001382:	6861      	ldr	r1, [r4, #4]
 8001384:	084b      	lsrs	r3, r1, #1
 8001386:	e002      	b.n	800138e <UART_SetConfig+0xca>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001388:	6861      	ldr	r1, [r4, #4]
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <UART_SetConfig+0x104>)
 800138c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800138e:	18c0      	adds	r0, r0, r3
 8001390:	f7fe fec4 	bl	800011c <__udivsi3>
 8001394:	b280      	uxth	r0, r0
 8001396:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001398:	2000      	movs	r0, #0
        break;
 800139a:	e7db      	b.n	8001354 <UART_SetConfig+0x90>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800139c:	f7ff fa74 	bl	8000888 <HAL_RCC_GetSysClockFreq>
 80013a0:	e7ef      	b.n	8001382 <UART_SetConfig+0xbe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	6861      	ldr	r1, [r4, #4]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	0848      	lsrs	r0, r1, #1
 80013aa:	e7f0      	b.n	800138e <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
 80013ae:	e7d1      	b.n	8001354 <UART_SetConfig+0x90>
 80013b0:	ffff69f3 	.word	0xffff69f3
 80013b4:	ffffcfff 	.word	0xffffcfff
 80013b8:	fffff4ff 	.word	0xfffff4ff
 80013bc:	40021000 	.word	0x40021000
 80013c0:	08001bfd 	.word	0x08001bfd
 80013c4:	00f42400 	.word	0x00f42400
 80013c8:	007a1200 	.word	0x007a1200

080013cc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80013ce:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013d0:	07da      	lsls	r2, r3, #31
 80013d2:	d506      	bpl.n	80013e2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013d4:	6801      	ldr	r1, [r0, #0]
 80013d6:	4c28      	ldr	r4, [pc, #160]	; (8001478 <UART_AdvFeatureConfig+0xac>)
 80013d8:	684a      	ldr	r2, [r1, #4]
 80013da:	4022      	ands	r2, r4
 80013dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80013de:	4322      	orrs	r2, r4
 80013e0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013e2:	079a      	lsls	r2, r3, #30
 80013e4:	d506      	bpl.n	80013f4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013e6:	6801      	ldr	r1, [r0, #0]
 80013e8:	4c24      	ldr	r4, [pc, #144]	; (800147c <UART_AdvFeatureConfig+0xb0>)
 80013ea:	684a      	ldr	r2, [r1, #4]
 80013ec:	4022      	ands	r2, r4
 80013ee:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013f0:	4322      	orrs	r2, r4
 80013f2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013f4:	075a      	lsls	r2, r3, #29
 80013f6:	d506      	bpl.n	8001406 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80013f8:	6801      	ldr	r1, [r0, #0]
 80013fa:	4c21      	ldr	r4, [pc, #132]	; (8001480 <UART_AdvFeatureConfig+0xb4>)
 80013fc:	684a      	ldr	r2, [r1, #4]
 80013fe:	4022      	ands	r2, r4
 8001400:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001402:	4322      	orrs	r2, r4
 8001404:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001406:	071a      	lsls	r2, r3, #28
 8001408:	d506      	bpl.n	8001418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800140a:	6801      	ldr	r1, [r0, #0]
 800140c:	4c1d      	ldr	r4, [pc, #116]	; (8001484 <UART_AdvFeatureConfig+0xb8>)
 800140e:	684a      	ldr	r2, [r1, #4]
 8001410:	4022      	ands	r2, r4
 8001412:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001414:	4322      	orrs	r2, r4
 8001416:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001418:	06da      	lsls	r2, r3, #27
 800141a:	d506      	bpl.n	800142a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800141c:	6801      	ldr	r1, [r0, #0]
 800141e:	4c1a      	ldr	r4, [pc, #104]	; (8001488 <UART_AdvFeatureConfig+0xbc>)
 8001420:	688a      	ldr	r2, [r1, #8]
 8001422:	4022      	ands	r2, r4
 8001424:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001426:	4322      	orrs	r2, r4
 8001428:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800142a:	069a      	lsls	r2, r3, #26
 800142c:	d506      	bpl.n	800143c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800142e:	6801      	ldr	r1, [r0, #0]
 8001430:	4c16      	ldr	r4, [pc, #88]	; (800148c <UART_AdvFeatureConfig+0xc0>)
 8001432:	688a      	ldr	r2, [r1, #8]
 8001434:	4022      	ands	r2, r4
 8001436:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001438:	4322      	orrs	r2, r4
 800143a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800143c:	065a      	lsls	r2, r3, #25
 800143e:	d510      	bpl.n	8001462 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001440:	6801      	ldr	r1, [r0, #0]
 8001442:	4d13      	ldr	r5, [pc, #76]	; (8001490 <UART_AdvFeatureConfig+0xc4>)
 8001444:	684a      	ldr	r2, [r1, #4]
 8001446:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001448:	402a      	ands	r2, r5
 800144a:	4322      	orrs	r2, r4
 800144c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	0352      	lsls	r2, r2, #13
 8001452:	4294      	cmp	r4, r2
 8001454:	d105      	bne.n	8001462 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001456:	684a      	ldr	r2, [r1, #4]
 8001458:	4c0e      	ldr	r4, [pc, #56]	; (8001494 <UART_AdvFeatureConfig+0xc8>)
 800145a:	4022      	ands	r2, r4
 800145c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800145e:	4322      	orrs	r2, r4
 8001460:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001462:	061b      	lsls	r3, r3, #24
 8001464:	d506      	bpl.n	8001474 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001466:	6802      	ldr	r2, [r0, #0]
 8001468:	490b      	ldr	r1, [pc, #44]	; (8001498 <UART_AdvFeatureConfig+0xcc>)
 800146a:	6853      	ldr	r3, [r2, #4]
 800146c:	400b      	ands	r3, r1
 800146e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001470:	430b      	orrs	r3, r1
 8001472:	6053      	str	r3, [r2, #4]
  }
}
 8001474:	bd30      	pop	{r4, r5, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	fffdffff 	.word	0xfffdffff
 800147c:	fffeffff 	.word	0xfffeffff
 8001480:	fffbffff 	.word	0xfffbffff
 8001484:	ffff7fff 	.word	0xffff7fff
 8001488:	ffffefff 	.word	0xffffefff
 800148c:	ffffdfff 	.word	0xffffdfff
 8001490:	ffefffff 	.word	0xffefffff
 8001494:	ff9fffff 	.word	0xff9fffff
 8001498:	fff7ffff 	.word	0xfff7ffff

0800149c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	0004      	movs	r4, r0
 80014a0:	000e      	movs	r6, r1
 80014a2:	0015      	movs	r5, r2
 80014a4:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014a6:	6822      	ldr	r2, [r4, #0]
 80014a8:	69d3      	ldr	r3, [r2, #28]
 80014aa:	4033      	ands	r3, r6
 80014ac:	1b9b      	subs	r3, r3, r6
 80014ae:	4259      	negs	r1, r3
 80014b0:	414b      	adcs	r3, r1
 80014b2:	42ab      	cmp	r3, r5
 80014b4:	d001      	beq.n	80014ba <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80014b6:	2000      	movs	r0, #0
 80014b8:	e018      	b.n	80014ec <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80014ba:	9b06      	ldr	r3, [sp, #24]
 80014bc:	3301      	adds	r3, #1
 80014be:	d0f3      	beq.n	80014a8 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014c0:	9b06      	ldr	r3, [sp, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d113      	bne.n	80014ee <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	490c      	ldr	r1, [pc, #48]	; (80014fc <UART_WaitOnFlagUntilTimeout+0x60>)
 80014ca:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 80014cc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014ce:	400a      	ands	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	31a3      	adds	r1, #163	; 0xa3
 80014d6:	31ff      	adds	r1, #255	; 0xff
 80014d8:	438a      	bics	r2, r1
 80014da:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80014dc:	0022      	movs	r2, r4
 80014de:	2320      	movs	r3, #32
 80014e0:	3269      	adds	r2, #105	; 0x69
 80014e2:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80014e4:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 80014e6:	2300      	movs	r3, #0
 80014e8:	3468      	adds	r4, #104	; 0x68
 80014ea:	7023      	strb	r3, [r4, #0]
}
 80014ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014ee:	f7fe fecb 	bl	8000288 <HAL_GetTick>
 80014f2:	9b06      	ldr	r3, [sp, #24]
 80014f4:	1bc0      	subs	r0, r0, r7
 80014f6:	4283      	cmp	r3, r0
 80014f8:	d2d5      	bcs.n	80014a6 <UART_WaitOnFlagUntilTimeout+0xa>
 80014fa:	e7e4      	b.n	80014c6 <UART_WaitOnFlagUntilTimeout+0x2a>
 80014fc:	fffffe5f 	.word	0xfffffe5f

08001500 <UART_CheckIdleState>:
{
 8001500:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001502:	2600      	movs	r6, #0
{
 8001504:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001506:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001508:	f7fe febe 	bl	8000288 <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <UART_CheckIdleState+0x68>)
 800150e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001510:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8001512:	4293      	cmp	r3, r2
 8001514:	d008      	beq.n	8001528 <UART_CheckIdleState+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8001516:	0022      	movs	r2, r4
 8001518:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800151a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800151c:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 800151e:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001520:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001522:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8001524:	7020      	strb	r0, [r4, #0]
}
 8001526:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	071b      	lsls	r3, r3, #28
 800152c:	d40f      	bmi.n	800154e <UART_CheckIdleState+0x4e>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	075b      	lsls	r3, r3, #29
 8001534:	d5ef      	bpl.n	8001516 <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <UART_CheckIdleState+0x6c>)
 800153a:	2200      	movs	r2, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	03c9      	lsls	r1, r1, #15
 8001540:	002b      	movs	r3, r5
 8001542:	0020      	movs	r0, r4
 8001544:	f7ff ffaa 	bl	800149c <UART_WaitOnFlagUntilTimeout>
 8001548:	2800      	cmp	r0, #0
 800154a:	d10b      	bne.n	8001564 <UART_CheckIdleState+0x64>
 800154c:	e7e3      	b.n	8001516 <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800154e:	2180      	movs	r1, #128	; 0x80
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <UART_CheckIdleState+0x6c>)
 8001552:	0032      	movs	r2, r6
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	0389      	lsls	r1, r1, #14
 8001558:	0003      	movs	r3, r0
 800155a:	0020      	movs	r0, r4
 800155c:	f7ff ff9e 	bl	800149c <UART_WaitOnFlagUntilTimeout>
 8001560:	2800      	cmp	r0, #0
 8001562:	d0e4      	beq.n	800152e <UART_CheckIdleState+0x2e>
        return HAL_TIMEOUT;
 8001564:	2003      	movs	r0, #3
 8001566:	e7de      	b.n	8001526 <UART_CheckIdleState+0x26>
 8001568:	40013800 	.word	0x40013800
 800156c:	01ffffff 	.word	0x01ffffff

08001570 <HAL_UART_Init>:
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001574:	d101      	bne.n	800157a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001576:	2001      	movs	r0, #1
}
 8001578:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800157a:	0005      	movs	r5, r0
 800157c:	3569      	adds	r5, #105	; 0x69
 800157e:	782b      	ldrb	r3, [r5, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d104      	bne.n	8001590 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001586:	0002      	movs	r2, r0
 8001588:	3268      	adds	r2, #104	; 0x68
 800158a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800158c:	f000 fa40 	bl	8001a10 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001590:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001592:	2101      	movs	r1, #1
 8001594:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001596:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001598:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800159a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800159c:	438b      	bics	r3, r1
 800159e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015a0:	f7ff fe90 	bl	80012c4 <UART_SetConfig>
 80015a4:	2801      	cmp	r0, #1
 80015a6:	d0e6      	beq.n	8001576 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80015ae:	0020      	movs	r0, r4
 80015b0:	f7ff ff0c 	bl	80013cc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <HAL_UART_Init+0x68>)
 80015b8:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80015ba:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015bc:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015be:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	438a      	bics	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80015c8:	2201      	movs	r2, #1
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80015d0:	f7ff ff96 	bl	8001500 <UART_CheckIdleState>
 80015d4:	e7d0      	b.n	8001578 <HAL_UART_Init+0x8>
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	ffffb7ff 	.word	0xffffb7ff

080015dc <disp_init>:
Private void drawChar(char c, int x, int y);
Private void drawString(char * str, int x, int y);

/********* Public functions  *********/
Public void disp_init(void)
{
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(SPI_Latch_GPIO_Port, SPI_Latch_Pin, state);
}

Private void set_enable(int state)
{
	HAL_GPIO_WritePin(SPI_Enable_GPIO_Port, SPI_Enable_Pin, state);
 80015de:	2500      	movs	r5, #0
{
 80015e0:	b085      	sub	sp, #20
	HAL_GPIO_WritePin(SPI_Enable_GPIO_Port, SPI_Enable_Pin, state);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2101      	movs	r1, #1
 80015e6:	4827      	ldr	r0, [pc, #156]	; (8001684 <disp_init+0xa8>)
 80015e8:	f7fe ff62 	bl	80004b0 <HAL_GPIO_WritePin>
	U8 xpos = x;
 80015ec:	002c      	movs	r4, r5
 80015ee:	2605      	movs	r6, #5
	bitmap_T * bmp = getCharBmp(c);
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <disp_init+0xac>)
 80015f2:	436e      	muls	r6, r5
 80015f4:	5d58      	ldrb	r0, [r3, r5]
 80015f6:	f000 f885 	bl	8001704 <getCharBmp>
	if (bmp != NULL)
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d106      	bne.n	800160c <disp_init+0x30>
		xpos += 5u;
 80015fe:	3405      	adds	r4, #5
 8001600:	b2e4      	uxtb	r4, r4
 8001602:	3501      	adds	r5, #1
	for (ix = 0u; ix < len; ix++)
 8001604:	2c32      	cmp	r4, #50	; 0x32
 8001606:	d1f2      	bne.n	80015ee <disp_init+0x12>
}
 8001608:	b005      	add	sp, #20
 800160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mask = mask << (column);
 800160c:	2201      	movs	r2, #1
		bmp->ypos = y;
 800160e:	2301      	movs	r3, #1
	mask = mask << (column);
 8001610:	4252      	negs	r2, r2
 8001612:	40b2      	lsls	r2, r6
		bmp->ypos = y;
 8001614:	7043      	strb	r3, [r0, #1]
	const U8 * data_ptr = bmp->data;
 8001616:	6843      	ldr	r3, [r0, #4]
	last_column = (bmp->xpos + bmp->x_len) - 1;
 8001618:	1e61      	subs	r1, r4, #1
	const U8 * data_ptr = bmp->data;
 800161a:	469c      	mov	ip, r3
	last_row = (bmp->ypos + bmp->y_len) - 1;
 800161c:	78c3      	ldrb	r3, [r0, #3]
		bmp->xpos = x;
 800161e:	7004      	strb	r4, [r0, #0]
	last_row = (bmp->ypos + bmp->y_len) - 1;
 8001620:	9302      	str	r3, [sp, #8]
	last_column = (bmp->xpos + bmp->x_len) - 1;
 8001622:	7883      	ldrb	r3, [r0, #2]
	mask = mask >> (column);
 8001624:	40f2      	lsrs	r2, r6
	last_column = (bmp->xpos + bmp->x_len) - 1;
 8001626:	1859      	adds	r1, r3, r1
 8001628:	b2c9      	uxtb	r1, r1
 800162a:	9301      	str	r3, [sp, #4]
	mask = mask >> (31 - last_column);
 800162c:	1c0b      	adds	r3, r1, #0
 800162e:	291f      	cmp	r1, #31
 8001630:	d900      	bls.n	8001634 <disp_init+0x58>
 8001632:	231f      	movs	r3, #31
 8001634:	211f      	movs	r1, #31
 8001636:	b2db      	uxtb	r3, r3
 8001638:	1acb      	subs	r3, r1, r3
 800163a:	40da      	lsrs	r2, r3
	mask = mask << (31 - last_column);
 800163c:	409a      	lsls	r2, r3
	row = bmp->ypos;
 800163e:	391e      	subs	r1, #30
	mask = mask << (31 - last_column);
 8001640:	9203      	str	r2, [sp, #12]
	for (; row <= last_row; row++)
 8001642:	9b02      	ldr	r3, [sp, #8]
 8001644:	428b      	cmp	r3, r1
 8001646:	d3da      	bcc.n	80015fe <disp_init+0x22>
 8001648:	2200      	movs	r2, #0
 800164a:	0013      	movs	r3, r2
 800164c:	e009      	b.n	8001662 <disp_init+0x86>
			image_data |= (U32)(*data_ptr) << (24u - ix);
 800164e:	4660      	mov	r0, ip
 8001650:	2718      	movs	r7, #24
 8001652:	7800      	ldrb	r0, [r0, #0]
 8001654:	1abf      	subs	r7, r7, r2
 8001656:	40b8      	lsls	r0, r7
 8001658:	4303      	orrs	r3, r0
			data_ptr++;
 800165a:	2001      	movs	r0, #1
		for(ix = 0u; ix < bmp->x_len; ix += 8)
 800165c:	3208      	adds	r2, #8
			data_ptr++;
 800165e:	4484      	add	ip, r0
		for(ix = 0u; ix < bmp->x_len; ix += 8)
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	9801      	ldr	r0, [sp, #4]
 8001664:	4290      	cmp	r0, r2
 8001666:	d8f2      	bhi.n	800164e <disp_init+0x72>
		image_data = image_data >> (column );
 8001668:	40f3      	lsrs	r3, r6
		video_memory[row] &= ~mask;
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <disp_init+0xb0>)
 800166c:	0088      	lsls	r0, r1, #2
 800166e:	5882      	ldr	r2, [r0, r2]
		video_memory[row] |= image_data;
 8001670:	9f03      	ldr	r7, [sp, #12]
 8001672:	4053      	eors	r3, r2
 8001674:	403b      	ands	r3, r7
 8001676:	405a      	eors	r2, r3
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <disp_init+0xb0>)
	for (; row <= last_row; row++)
 800167a:	3101      	adds	r1, #1
		video_memory[row] |= image_data;
 800167c:	50c2      	str	r2, [r0, r3]
	for (; row <= last_row; row++)
 800167e:	b2c9      	uxtb	r1, r1
 8001680:	e7df      	b.n	8001642 <disp_init+0x66>
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	48000400 	.word	0x48000400
 8001688:	08001c01 	.word	0x08001c01
 800168c:	20000030 	.word	0x20000030

08001690 <disp_scan>:
{
 8001690:	b507      	push	{r0, r1, r2, lr}
	uint8_t test_pattern[5] = { 0xffu, 0xffu, 0xffu, 0xffu, 0xffu };
 8001692:	2205      	movs	r2, #5
 8001694:	4917      	ldr	r1, [pc, #92]	; (80016f4 <disp_scan+0x64>)
 8001696:	4668      	mov	r0, sp
 8001698:	f000 fa80 	bl	8001b9c <memcpy>
	HAL_GPIO_WritePin(SPI_Latch_GPIO_Port, SPI_Latch_Pin, state);
 800169c:	2090      	movs	r0, #144	; 0x90
 800169e:	2201      	movs	r2, #1
 80016a0:	2140      	movs	r1, #64	; 0x40
 80016a2:	05c0      	lsls	r0, r0, #23
 80016a4:	f7fe ff04 	bl	80004b0 <HAL_GPIO_WritePin>
 80016a8:	2090      	movs	r0, #144	; 0x90
 80016aa:	2200      	movs	r2, #0
 80016ac:	2140      	movs	r1, #64	; 0x40
 80016ae:	05c0      	lsls	r0, r0, #23
 80016b0:	f7fe fefe 	bl	80004b0 <HAL_GPIO_WritePin>
	cycle++;
 80016b4:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <disp_scan+0x68>)
 80016b6:	7813      	ldrb	r3, [r2, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2db      	uxtb	r3, r3
	if (cycle >= 8u)
 80016bc:	2b07      	cmp	r3, #7
 80016be:	d816      	bhi.n	80016ee <disp_scan+0x5e>
		cycle = 0u;
 80016c0:	7013      	strb	r3, [r2, #0]
	test_pattern[0] = 0x80 >> cycle;
 80016c2:	7813      	ldrb	r3, [r2, #0]
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	4669      	mov	r1, sp
 80016c8:	411a      	asrs	r2, r3
 80016ca:	700a      	strb	r2, [r1, #0]
	test_pattern[1] = video_memory[cycle] & 0x000000ffu;
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <disp_scan+0x6c>)
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	589b      	ldr	r3, [r3, r2]
	HAL_SPI_Transmit(&hspi1, test_pattern, 5u, ~0);
 80016d2:	480b      	ldr	r0, [pc, #44]	; (8001700 <disp_scan+0x70>)
	test_pattern[2] = (video_memory[cycle] >> 8) & 0x000000ffu;
 80016d4:	0a1a      	lsrs	r2, r3, #8
	test_pattern[1] = video_memory[cycle] & 0x000000ffu;
 80016d6:	704b      	strb	r3, [r1, #1]
	test_pattern[2] = (video_memory[cycle] >> 8) & 0x000000ffu;
 80016d8:	708a      	strb	r2, [r1, #2]
	test_pattern[3] = (video_memory[cycle] >> 16) & 0x000000ffu;
 80016da:	0c1a      	lsrs	r2, r3, #16
	test_pattern[4] = (video_memory[cycle] >> 24) & 0x000000ffu;
 80016dc:	0e1b      	lsrs	r3, r3, #24
 80016de:	710b      	strb	r3, [r1, #4]
	HAL_SPI_Transmit(&hspi1, test_pattern, 5u, ~0);
 80016e0:	2301      	movs	r3, #1
	test_pattern[3] = (video_memory[cycle] >> 16) & 0x000000ffu;
 80016e2:	70ca      	strb	r2, [r1, #3]
	HAL_SPI_Transmit(&hspi1, test_pattern, 5u, ~0);
 80016e4:	425b      	negs	r3, r3
 80016e6:	2205      	movs	r2, #5
 80016e8:	f7ff fb1c 	bl	8000d24 <HAL_SPI_Transmit>
}
 80016ec:	bd07      	pop	{r0, r1, r2, pc}
		cycle = 0u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e7e6      	b.n	80016c0 <disp_scan+0x30>
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	08001bf8 	.word	0x08001bf8
 80016f8:	20000020 	.word	0x20000020
 80016fc:	20000030 	.word	0x20000030
 8001700:	20000100 	.word	0x20000100

08001704 <getCharBmp>:
{
	static bitmap_T res;
	U8 ix;


	res.xpos = 0u;
 8001704:	2200      	movs	r2, #0
	res.ypos = 0u;

	res.x_len = 5u;
 8001706:	2105      	movs	r1, #5
	res.xpos = 0u;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <getCharBmp+0x28>)
	res.y_len = 5u;


	if ((c >= FONT_BEGIN) && (c <= FONT_END))
 800170a:	3820      	subs	r0, #32
 800170c:	b2c0      	uxtb	r0, r0
	res.xpos = 0u;
 800170e:	701a      	strb	r2, [r3, #0]
	res.ypos = 0u;
 8001710:	705a      	strb	r2, [r3, #1]
	res.x_len = 5u;
 8001712:	7099      	strb	r1, [r3, #2]
	res.y_len = 5u;
 8001714:	70d9      	strb	r1, [r3, #3]
 8001716:	4a06      	ldr	r2, [pc, #24]	; (8001730 <getCharBmp+0x2c>)
	if ((c >= FONT_BEGIN) && (c <= FONT_END))
 8001718:	283a      	cmp	r0, #58	; 0x3a
 800171a:	d804      	bhi.n	8001726 <getCharBmp+0x22>
	{
		ix = c - 32;
		res.data = priv_font_data[ix];
 800171c:	4348      	muls	r0, r1
 800171e:	1810      	adds	r0, r2, r0
 8001720:	6058      	str	r0, [r3, #4]
	else
	{
		res.data = priv_font_data[0];
	}
	return &res;
}
 8001722:	0018      	movs	r0, r3
 8001724:	4770      	bx	lr
		res.data = priv_font_data[0];
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	e7fb      	b.n	8001722 <getCharBmp+0x1e>
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000024 	.word	0x20000024
 8001730:	08001c0c 	.word	0x08001c0c

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001736:	2610      	movs	r6, #16
{
 8001738:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	a808      	add	r0, sp, #32
 8001740:	f000 fa35 	bl	8001bae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	0032      	movs	r2, r6
 8001746:	2100      	movs	r1, #0
 8001748:	4668      	mov	r0, sp
 800174a:	f000 fa30 	bl	8001bae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174e:	0032      	movs	r2, r6
 8001750:	2100      	movs	r1, #0
 8001752:	a804      	add	r0, sp, #16
 8001754:	f000 fa2b 	bl	8001bae <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001758:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800175a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175c:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800175e:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001762:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001764:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001766:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001768:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176a:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f7fe feaa 	bl	80004c4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001770:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001772:	9401      	str	r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001776:	0029      	movs	r1, r5
 8001778:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177a:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177e:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001780:	f7ff f8b4 	bl	80008ec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001786:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001788:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800178a:	f7ff f95b 	bl	8000a44 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800178e:	b014      	add	sp, #80	; 0x50
 8001790:	bd70      	pop	{r4, r5, r6, pc}
	...

08001794 <main>:
{
 8001794:	b570      	push	{r4, r5, r6, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001798:	f7fe fd5e 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 800179c:	f7ff ffca 	bl	8001734 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	2214      	movs	r2, #20
 80017a2:	2100      	movs	r1, #0
 80017a4:	a805      	add	r0, sp, #20
 80017a6:	f000 fa02 	bl	8001bae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017aa:	2080      	movs	r0, #128	; 0x80
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <main+0x144>)
 80017ae:	03c0      	lsls	r0, r0, #15
 80017b0:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, SPI_Enable_Pin|LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SPI_Latch_Pin */
  GPIO_InitStruct.Pin = SPI_Latch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b4:	4301      	orrs	r1, r0
 80017b6:	6159      	str	r1, [r3, #20]
 80017b8:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2501      	movs	r5, #1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017bc:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c0:	9200      	str	r2, [sp, #0]
 80017c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	6959      	ldr	r1, [r3, #20]
 80017c6:	0280      	lsls	r0, r0, #10
 80017c8:	4301      	orrs	r1, r0
 80017ca:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(SPI_Latch_GPIO_Port, SPI_Latch_Pin, GPIO_PIN_RESET);
 80017d4:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(SPI_Latch_GPIO_Port, SPI_Latch_Pin, GPIO_PIN_RESET);
 80017dc:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	430a      	orrs	r2, r1
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(SPI_Latch_GPIO_Port, SPI_Latch_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	400b      	ands	r3, r1
 80017e8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(SPI_Latch_GPIO_Port, SPI_Latch_Pin, GPIO_PIN_RESET);
 80017ea:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(SPI_Latch_GPIO_Port, SPI_Latch_Pin, GPIO_PIN_RESET);
 80017ee:	f7fe fe5f 	bl	80004b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SPI_Enable_Pin|LED_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2109      	movs	r1, #9
 80017f6:	4839      	ldr	r0, [pc, #228]	; (80018dc <main+0x148>)
 80017f8:	f7fe fe5a 	bl	80004b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI_Latch_GPIO_Port, &GPIO_InitStruct);
 80017fc:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = SPI_Latch_Pin;
 80017fe:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(SPI_Latch_GPIO_Port, &GPIO_InitStruct);
 8001800:	a905      	add	r1, sp, #20
 8001802:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = SPI_Latch_Pin;
 8001804:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SPI_Latch_GPIO_Port, &GPIO_InitStruct);
 800180c:	f7fe fda6 	bl	800035c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_Enable_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI_Enable_Pin|LED_Pin;
 8001810:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	a905      	add	r1, sp, #20
 8001814:	4831      	ldr	r0, [pc, #196]	; (80018dc <main+0x148>)
  GPIO_InitStruct.Pin = SPI_Enable_Pin|LED_Pin;
 8001816:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	f7fe fd9d 	bl	800035c <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8001822:	482f      	ldr	r0, [pc, #188]	; (80018e0 <main+0x14c>)
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <main+0x150>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001826:	2608      	movs	r6, #8
  huart1.Instance = USART1;
 8001828:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800182a:	23e1      	movs	r3, #225	; 0xe1
 800182c:	025b      	lsls	r3, r3, #9
 800182e:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001830:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	6084      	str	r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001834:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001836:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001838:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001840:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001842:	f7ff fe95 	bl	8001570 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	2210      	movs	r2, #16
 8001848:	0021      	movs	r1, r4
 800184a:	a805      	add	r0, sp, #20
 800184c:	f000 f9af 	bl	8001bae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	0032      	movs	r2, r6
 8001852:	0021      	movs	r1, r4
 8001854:	a803      	add	r0, sp, #12
 8001856:	f000 f9aa 	bl	8001bae <memset>
  htim1.Instance = TIM1;
 800185a:	4d23      	ldr	r5, [pc, #140]	; (80018e8 <main+0x154>)
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <main+0x158>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800185e:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 8001860:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 49;
 8001862:	2331      	movs	r3, #49	; 0x31
 8001864:	606b      	str	r3, [r5, #4]
  htim1.Init.Period = 1249;
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <main+0x15c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 1249;
 800186a:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800186e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001870:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001872:	f7ff fc27 	bl	80010c4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001876:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001878:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187c:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187e:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001880:	f7ff fc48 	bl	8001114 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001884:	a903      	add	r1, sp, #12
 8001886:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188a:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800188c:	f7ff fcf6 	bl	800127c <HAL_TIMEx_MasterConfigSynchronization>
  hspi1.Instance = SPI1;
 8001890:	4818      	ldr	r0, [pc, #96]	; (80018f4 <main+0x160>)
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <main+0x164>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001894:	6084      	str	r4, [r0, #8]
  hspi1.Instance = SPI1;
 8001896:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001898:	2382      	movs	r3, #130	; 0x82
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800189e:	23e0      	movs	r3, #224	; 0xe0
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018aa:	3bd1      	subs	r3, #209	; 0xd1
 80018ac:	3bff      	subs	r3, #255	; 0xff
 80018ae:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80018b0:	3350      	adds	r3, #80	; 0x50
 80018b2:	6203      	str	r3, [r0, #32]
  hspi1.Init.CRCPolynomial = 7;
 80018b4:	3b79      	subs	r3, #121	; 0x79
 80018b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b8:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ba:	6144      	str	r4, [r0, #20]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018bc:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018be:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018c0:	6304      	str	r4, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c2:	6346      	str	r6, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c4:	f7ff f9d0 	bl	8000c68 <HAL_SPI_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80018c8:	0028      	movs	r0, r5
 80018ca:	f7ff fb00 	bl	8000ece <HAL_TIM_Base_Start_IT>
  program_init();
 80018ce:	f000 f81f 	bl	8001910 <program_init>
	mainLoop();
 80018d2:	f000 f821 	bl	8001918 <mainLoop>
 80018d6:	e7fc      	b.n	80018d2 <main+0x13e>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48000400 	.word	0x48000400
 80018e0:	20000050 	.word	0x20000050
 80018e4:	40013800 	.word	0x40013800
 80018e8:	200000c0 	.word	0x200000c0
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	000004e1 	.word	0x000004e1
 80018f4:	20000100 	.word	0x20000100
 80018f8:	40013000 	.word	0x40013000

080018fc <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim == &htim1)
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x10>)
{
 80018fe:	b510      	push	{r4, lr}
	if(htim == &htim1)
 8001900:	4298      	cmp	r0, r3
 8001902:	d101      	bne.n	8001908 <HAL_TIM_PeriodElapsedCallback+0xc>
	{
		timer_callback_10ms();
 8001904:	f000 f814 	bl	8001930 <timer_callback_10ms>
	}
}
 8001908:	bd10      	pop	{r4, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	200000c0 	.word	0x200000c0

08001910 <program_init>:


/************ Public function declarations ************/

Public void program_init(void)
{
 8001910:	b510      	push	{r4, lr}
	//Initialize all program here.

	disp_init();
 8001912:	f7ff fe63 	bl	80015dc <disp_init>
}
 8001916:	bd10      	pop	{r4, pc}

08001918 <mainLoop>:

//This is called from while loop in main.
Public void mainLoop(void)
{
 8001918:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800191a:	2108      	movs	r1, #8
 800191c:	4803      	ldr	r0, [pc, #12]	; (800192c <mainLoop+0x14>)
 800191e:	f7fe fdcd 	bl	80004bc <HAL_GPIO_TogglePin>
	//_write(0u, "Hello!", 6u);
	//printf("Hello World!\r\n");
	HAL_Delay(1000u);
 8001922:	20fa      	movs	r0, #250	; 0xfa
 8001924:	0080      	lsls	r0, r0, #2
 8001926:	f7fe fcb5 	bl	8000294 <HAL_Delay>
}
 800192a:	bd10      	pop	{r4, pc}
 800192c:	48000400 	.word	0x48000400

08001930 <timer_callback_10ms>:

//Lets call this every 10ms.
Public void timer_callback_10ms(void)
{
 8001930:	b510      	push	{r4, lr}
	{
		cnt = 0u;
		printf("Timer! - Now 100Hz\r\n");
	}
#endif
	disp_scan();
 8001932:	f7ff fead 	bl	8001690 <disp_scan>
}
 8001936:	bd10      	pop	{r4, pc}

08001938 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	2001      	movs	r0, #1
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_MspInit+0x2c>)
{
 800193c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	6999      	ldr	r1, [r3, #24]
 8001940:	4301      	orrs	r1, r0
 8001942:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001948:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	4002      	ands	r2, r0
 800194c:	9200      	str	r2, [sp, #0]
 800194e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	430a      	orrs	r2, r1
 8001954:	61da      	str	r2, [r3, #28]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	400b      	ands	r3, r1
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	b002      	add	sp, #8
 8001960:	4770      	bx	lr
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001968:	b510      	push	{r4, lr}
 800196a:	0004      	movs	r4, r0
 800196c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	2214      	movs	r2, #20
 8001970:	2100      	movs	r1, #0
 8001972:	a803      	add	r0, sp, #12
 8001974:	f000 f91b 	bl	8001bae <memset>
  if(hspi->Instance==SPI1)
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_SPI_MspInit+0x58>)
 800197a:	6822      	ldr	r2, [r4, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d11d      	bne.n	80019bc <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001980:	2080      	movs	r0, #128	; 0x80
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_SPI_MspInit+0x5c>)
 8001984:	0140      	lsls	r0, r0, #5
 8001986:	6999      	ldr	r1, [r3, #24]
 8001988:	4301      	orrs	r1, r0
 800198a:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 800198e:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001992:	4002      	ands	r2, r0
 8001994:	9201      	str	r2, [sp, #4]
 8001996:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	430a      	orrs	r2, r1
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	400b      	ands	r3, r1
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80019aa:	23a0      	movs	r3, #160	; 0xa0
 80019ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	3b9e      	subs	r3, #158	; 0x9e
 80019b0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b4:	3301      	adds	r3, #1
 80019b6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f7fe fcd0 	bl	800035c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019bc:	b008      	add	sp, #32
 80019be:	bd10      	pop	{r4, pc}
 80019c0:	40013000 	.word	0x40013000
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_TIM_Base_MspInit+0x40>)
 80019cc:	6802      	ldr	r2, [r0, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d119      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d2:	2080      	movs	r0, #128	; 0x80
 80019d4:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_TIM_Base_MspInit+0x44>)
 80019d6:	0100      	lsls	r0, r0, #4
 80019d8:	6991      	ldr	r1, [r2, #24]
 80019da:	4301      	orrs	r1, r0
 80019dc:	6191      	str	r1, [r2, #24]
 80019de:	6993      	ldr	r3, [r2, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e2:	4003      	ands	r3, r0
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80019e4:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019e6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80019e8:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80019ec:	f7fe fc62 	bl	80002b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80019f0:	200d      	movs	r0, #13
 80019f2:	f7fe fc8f 	bl	8000314 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	200e      	movs	r0, #14
 80019fa:	0011      	movs	r1, r2
 80019fc:	f7fe fc5a 	bl	80002b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001a00:	200e      	movs	r0, #14
 8001a02:	f7fe fc87 	bl	8000314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a06:	bd07      	pop	{r0, r1, r2, pc}
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b510      	push	{r4, lr}
 8001a12:	0004      	movs	r4, r0
 8001a14:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a16:	2214      	movs	r2, #20
 8001a18:	2100      	movs	r1, #0
 8001a1a:	a803      	add	r0, sp, #12
 8001a1c:	f000 f8c7 	bl	8001bae <memset>
  if(huart->Instance==USART1)
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_UART_MspInit+0x5c>)
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d11f      	bne.n	8001a68 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a28:	2080      	movs	r0, #128	; 0x80
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x60>)
 8001a2c:	01c0      	lsls	r0, r0, #7
 8001a2e:	6999      	ldr	r1, [r3, #24]
 8001a30:	4301      	orrs	r1, r0
 8001a32:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a34:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a36:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a3a:	4002      	ands	r2, r0
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	430a      	orrs	r2, r1
 8001a46:	615a      	str	r2, [r3, #20]
 8001a48:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	400b      	ands	r3, r1
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|VCP_RX_Pin;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_UART_MspInit+0x64>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|VCP_RX_Pin;
 8001a56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001a60:	3b02      	subs	r3, #2
 8001a62:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f7fe fc7a 	bl	800035c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a68:	b008      	add	sp, #32
 8001a6a:	bd10      	pop	{r4, pc}
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	40021000 	.word	0x40021000
 8001a74:	00008004 	.word	0x00008004

08001a78 <NMI_Handler>:
 8001a78:	4770      	bx	lr

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler>

08001a7c <SVC_Handler>:
 8001a7c:	4770      	bx	lr

08001a7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f7fe fbf9 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bd10      	pop	{r4, pc}

08001a88 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a8a:	4802      	ldr	r0, [pc, #8]	; (8001a94 <TIM1_CC_IRQHandler+0xc>)
 8001a8c:	f7ff fa2d 	bl	8000eea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	200000c0 	.word	0x200000c0

08001a98 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
 8001a98:	b510      	push	{r4, lr}
 8001a9a:	f7ff fff5 	bl	8001a88 <TIM1_CC_IRQHandler>
 8001a9e:	bd10      	pop	{r4, pc}

08001aa0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001aa4:	4811      	ldr	r0, [pc, #68]	; (8001aec <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4002      	ands	r2, r0
 8001ab0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	480e      	ldr	r0, [pc, #56]	; (8001af0 <SystemInit+0x50>)
 8001ab6:	4002      	ands	r2, r0
 8001ab8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	480d      	ldr	r0, [pc, #52]	; (8001af4 <SystemInit+0x54>)
 8001abe:	4002      	ands	r2, r0
 8001ac0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <SystemInit+0x58>)
 8001ac6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ac8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001aca:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ace:	4382      	bics	r2, r0
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad4:	4809      	ldr	r0, [pc, #36]	; (8001afc <SystemInit+0x5c>)
 8001ad6:	4002      	ands	r2, r0
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	438a      	bics	r2, r1
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]

}
 8001ae4:	4770      	bx	lr
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	08ffb80c 	.word	0x08ffb80c
 8001af0:	fef6ffff 	.word	0xfef6ffff
 8001af4:	fffbffff 	.word	0xfffbffff
 8001af8:	ffc0ffff 	.word	0xffc0ffff
 8001afc:	fffffeec 	.word	0xfffffeec

08001b00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopForever+0xe>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopForever+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b2a:	f7ff ffb9 	bl	8001aa0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b2e:	f000 f811 	bl	8001b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7ff fe2f 	bl	8001794 <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   r0, =_estack
 8001b38:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001b44:	08001d54 	.word	0x08001d54
  ldr r2, =_sbss
 8001b48:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001b4c:	20000164 	.word	0x20000164

08001b50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_IRQHandler>
	...

08001b54 <__libc_init_array>:
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	2600      	movs	r6, #0
 8001b58:	4d0c      	ldr	r5, [pc, #48]	; (8001b8c <__libc_init_array+0x38>)
 8001b5a:	4c0d      	ldr	r4, [pc, #52]	; (8001b90 <__libc_init_array+0x3c>)
 8001b5c:	1b64      	subs	r4, r4, r5
 8001b5e:	10a4      	asrs	r4, r4, #2
 8001b60:	42a6      	cmp	r6, r4
 8001b62:	d109      	bne.n	8001b78 <__libc_init_array+0x24>
 8001b64:	2600      	movs	r6, #0
 8001b66:	f000 f82b 	bl	8001bc0 <_init>
 8001b6a:	4d0a      	ldr	r5, [pc, #40]	; (8001b94 <__libc_init_array+0x40>)
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	; (8001b98 <__libc_init_array+0x44>)
 8001b6e:	1b64      	subs	r4, r4, r5
 8001b70:	10a4      	asrs	r4, r4, #2
 8001b72:	42a6      	cmp	r6, r4
 8001b74:	d105      	bne.n	8001b82 <__libc_init_array+0x2e>
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
 8001b78:	00b3      	lsls	r3, r6, #2
 8001b7a:	58eb      	ldr	r3, [r5, r3]
 8001b7c:	4798      	blx	r3
 8001b7e:	3601      	adds	r6, #1
 8001b80:	e7ee      	b.n	8001b60 <__libc_init_array+0xc>
 8001b82:	00b3      	lsls	r3, r6, #2
 8001b84:	58eb      	ldr	r3, [r5, r3]
 8001b86:	4798      	blx	r3
 8001b88:	3601      	adds	r6, #1
 8001b8a:	e7f2      	b.n	8001b72 <__libc_init_array+0x1e>
 8001b8c:	08001d4c 	.word	0x08001d4c
 8001b90:	08001d4c 	.word	0x08001d4c
 8001b94:	08001d4c 	.word	0x08001d4c
 8001b98:	08001d50 	.word	0x08001d50

08001b9c <memcpy>:
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	b510      	push	{r4, lr}
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d100      	bne.n	8001ba6 <memcpy+0xa>
 8001ba4:	bd10      	pop	{r4, pc}
 8001ba6:	5ccc      	ldrb	r4, [r1, r3]
 8001ba8:	54c4      	strb	r4, [r0, r3]
 8001baa:	3301      	adds	r3, #1
 8001bac:	e7f8      	b.n	8001ba0 <memcpy+0x4>

08001bae <memset>:
 8001bae:	0003      	movs	r3, r0
 8001bb0:	1882      	adds	r2, r0, r2
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d100      	bne.n	8001bb8 <memset+0xa>
 8001bb6:	4770      	bx	lr
 8001bb8:	7019      	strb	r1, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	e7f9      	b.n	8001bb2 <memset+0x4>
	...

08001bc0 <_init>:
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bc6:	bc08      	pop	{r3}
 8001bc8:	469e      	mov	lr, r3
 8001bca:	4770      	bx	lr

08001bcc <_fini>:
 8001bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd2:	bc08      	pop	{r3}
 8001bd4:	469e      	mov	lr, r3
 8001bd6:	4770      	bx	lr
